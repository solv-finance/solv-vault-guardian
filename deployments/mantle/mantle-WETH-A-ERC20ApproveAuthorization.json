{
  "address": "0x004AEd2b1Dd2F95D8AC7f5C99276FD49A807a857",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safeMultiSendContract_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "caller_",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "spenders",
              "type": "address[]"
            }
          ],
          "internalType": "struct ERC20ApproveAuthorization.TokenSpenders[]",
          "name": "tokenSpenders_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "func_",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        }
      ],
      "name": "AddContractFunc",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "funcSig_",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        }
      ],
      "name": "AddContractFuncSig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "NewGovernor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "func_",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        }
      ],
      "name": "RemoveContractFunc",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "funcSig_",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        }
      ],
      "name": "RemoveContractFuncSig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "acl_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        }
      ],
      "name": "SetContractACL",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "TokenSpenderAdded",
      "type": "event"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SAFE_MULITSEND_FUNC_MULTI_SEND",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "acl_",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "funcList_",
          "type": "string[]"
        }
      ],
      "name": "addContractFuncs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "acl_",
          "type": "address"
        },
        {
          "internalType": "bytes4[]",
          "name": "funcSigList_",
          "type": "bytes4[]"
        }
      ],
      "name": "addContractFuncsSig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "spenders",
              "type": "address[]"
            }
          ],
          "internalType": "struct ERC20ApproveAuthorization.TokenSpenders[]",
          "name": "tokenSpendersList_",
          "type": "tuple[]"
        }
      ],
      "name": "addTokenSpenders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Type.TxData",
          "name": "txData_",
          "type": "tuple"
        }
      ],
      "name": "authorizationCheckTransaction",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "message",
              "type": "string"
            }
          ],
          "internalType": "struct Type.CheckResult",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "caller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forbidGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        }
      ],
      "name": "getACLByContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllContracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        }
      ],
      "name": "getFunctionsByContract",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTokenSpenders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governanceAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "funcList_",
          "type": "string[]"
        }
      ],
      "name": "removeContractFuncs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "internalType": "bytes4[]",
          "name": "funcSigList_",
          "type": "bytes4[]"
        }
      ],
      "name": "removeContractFuncsSig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "spenders",
              "type": "address[]"
            }
          ],
          "internalType": "struct ERC20ApproveAuthorization.TokenSpenders[]",
          "name": "tokenSpendersList_",
          "type": "tuple[]"
        }
      ],
      "name": "removeTokenSpenders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeMultiSendContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "acl_",
          "type": "address"
        }
      ],
      "name": "setContractACL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGovernor_",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x66b43e0da379dfccb65a383eb07d618fd810849074dc0fa94d1b588c1daa1459",
  "receipt": {
    "to": null,
    "from": "0x3781C839a7BF1a78b27e2639366aDc6f000ea99c",
    "contractAddress": "0x004AEd2b1Dd2F95D8AC7f5C99276FD49A807a857",
    "transactionIndex": 0,
    "gasUsed": "3454365",
    "logsBloom": "0x0000000000000100000000000000000000000000000000a80000000082000000020000000000001008004000040c000020000100800001200008000000000000000000000000000000000000200000000000000000000000000400000000000000000000020000000000200000000800000000000000200400080000004000000000000100000800000000034000000000000000000000000000000000000001000000000000000400200000400000000000080001000000000000008000800040000008000000000000008000000000000000000000000000000000000020000000000000008000000000000000000000000048001000001000000000080000",
    "blockHash": "0x5e53395d7a0636396d45193f0174baaec04e01a299ac43d1686b04d93000af81",
    "transactionHash": "0x66b43e0da379dfccb65a383eb07d618fd810849074dc0fa94d1b588c1daa1459",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 50068771,
        "transactionHash": "0x66b43e0da379dfccb65a383eb07d618fd810849074dc0fa94d1b588c1daa1459",
        "address": "0x004AEd2b1Dd2F95D8AC7f5C99276FD49A807a857",
        "topics": [
          "0x1ba669d4a78521f2ad26e8e0fcbcdd626a63f34d68f326bc232a3abe2a5d042a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003781c839a7bf1a78b27e2639366adc6f000ea99c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5e53395d7a0636396d45193f0174baaec04e01a299ac43d1686b04d93000af81"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 50068771,
        "transactionHash": "0x66b43e0da379dfccb65a383eb07d618fd810849074dc0fa94d1b588c1daa1459",
        "address": "0x004AEd2b1Dd2F95D8AC7f5C99276FD49A807a857",
        "topics": [
          "0x5c55717c3268b2c739eb5087e22a9bcf39b0d4f5a8ab89b4fff9cfe5711e4b34",
          "0x000000000000000000000000deaddeaddeaddeaddeaddeaddeaddeaddead1111",
          "0x0000000000000000000000003781c839a7bf1a78b27e2639366adc6f000ea99c"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000018617070726f766528616464726573732c75696e74323536290000000000000000",
        "logIndex": 1,
        "blockHash": "0x5e53395d7a0636396d45193f0174baaec04e01a299ac43d1686b04d93000af81"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 50068771,
        "transactionHash": "0x66b43e0da379dfccb65a383eb07d618fd810849074dc0fa94d1b588c1daa1459",
        "address": "0x004AEd2b1Dd2F95D8AC7f5C99276FD49A807a857",
        "topics": [
          "0x246b022c673a2751245f84dced77afcce61bcd820ff1235276e8c1c242a78f74",
          "0x000000000000000000000000deaddeaddeaddeaddeaddeaddeaddeaddead1111",
          "0x095ea7b300000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003781c839a7bf1a78b27e2639366adc6f000ea99c"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x5e53395d7a0636396d45193f0174baaec04e01a299ac43d1686b04d93000af81"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 50068771,
        "transactionHash": "0x66b43e0da379dfccb65a383eb07d618fd810849074dc0fa94d1b588c1daa1459",
        "address": "0x004AEd2b1Dd2F95D8AC7f5C99276FD49A807a857",
        "topics": [
          "0x5c55717c3268b2c739eb5087e22a9bcf39b0d4f5a8ab89b4fff9cfe5711e4b34",
          "0x000000000000000000000000deaddeaddeaddeaddeaddeaddeaddeaddead1111",
          "0x0000000000000000000000003781c839a7bf1a78b27e2639366adc6f000ea99c"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000022696e637265617365416c6c6f77616e636528616464726573732c75696e7432353629000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 3,
        "blockHash": "0x5e53395d7a0636396d45193f0174baaec04e01a299ac43d1686b04d93000af81"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 50068771,
        "transactionHash": "0x66b43e0da379dfccb65a383eb07d618fd810849074dc0fa94d1b588c1daa1459",
        "address": "0x004AEd2b1Dd2F95D8AC7f5C99276FD49A807a857",
        "topics": [
          "0x246b022c673a2751245f84dced77afcce61bcd820ff1235276e8c1c242a78f74",
          "0x000000000000000000000000deaddeaddeaddeaddeaddeaddeaddeaddead1111",
          "0x3950935100000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003781c839a7bf1a78b27e2639366adc6f000ea99c"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x5e53395d7a0636396d45193f0174baaec04e01a299ac43d1686b04d93000af81"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 50068771,
        "transactionHash": "0x66b43e0da379dfccb65a383eb07d618fd810849074dc0fa94d1b588c1daa1459",
        "address": "0x004AEd2b1Dd2F95D8AC7f5C99276FD49A807a857",
        "topics": [
          "0x5c55717c3268b2c739eb5087e22a9bcf39b0d4f5a8ab89b4fff9cfe5711e4b34",
          "0x000000000000000000000000deaddeaddeaddeaddeaddeaddeaddeaddead1111",
          "0x0000000000000000000000003781c839a7bf1a78b27e2639366adc6f000ea99c"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000226465637265617365416c6c6f77616e636528616464726573732c75696e7432353629000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 5,
        "blockHash": "0x5e53395d7a0636396d45193f0174baaec04e01a299ac43d1686b04d93000af81"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 50068771,
        "transactionHash": "0x66b43e0da379dfccb65a383eb07d618fd810849074dc0fa94d1b588c1daa1459",
        "address": "0x004AEd2b1Dd2F95D8AC7f5C99276FD49A807a857",
        "topics": [
          "0x246b022c673a2751245f84dced77afcce61bcd820ff1235276e8c1c242a78f74",
          "0x000000000000000000000000deaddeaddeaddeaddeaddeaddeaddeaddead1111",
          "0xa457c2d700000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003781c839a7bf1a78b27e2639366adc6f000ea99c"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x5e53395d7a0636396d45193f0174baaec04e01a299ac43d1686b04d93000af81"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 50068771,
        "transactionHash": "0x66b43e0da379dfccb65a383eb07d618fd810849074dc0fa94d1b588c1daa1459",
        "address": "0x004AEd2b1Dd2F95D8AC7f5C99276FD49A807a857",
        "topics": [
          "0x784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a4",
          "0x000000000000000000000000deaddeaddeaddeaddeaddeaddeaddeaddead1111"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x5e53395d7a0636396d45193f0174baaec04e01a299ac43d1686b04d93000af81"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 50068771,
        "transactionHash": "0x66b43e0da379dfccb65a383eb07d618fd810849074dc0fa94d1b588c1daa1459",
        "address": "0x004AEd2b1Dd2F95D8AC7f5C99276FD49A807a857",
        "topics": [
          "0xf9379a04548d43557a3776d3a8d84c311dc0f769747526985c7b020600e6f156",
          "0x000000000000000000000000deaddeaddeaddeaddeaddeaddeaddeaddead1111",
          "0x000000000000000000000000788dc3af7b62708b752d483a6e30d1cf23c3eaae"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x5e53395d7a0636396d45193f0174baaec04e01a299ac43d1686b04d93000af81"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 50068771,
        "transactionHash": "0x66b43e0da379dfccb65a383eb07d618fd810849074dc0fa94d1b588c1daa1459",
        "address": "0x004AEd2b1Dd2F95D8AC7f5C99276FD49A807a857",
        "topics": [
          "0xf9379a04548d43557a3776d3a8d84c311dc0f769747526985c7b020600e6f156",
          "0x000000000000000000000000deaddeaddeaddeaddeaddeaddeaddeaddead1111",
          "0x0000000000000000000000009b8a1b5d2f1bcc95d1ceab97fa9e063464418925"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x5e53395d7a0636396d45193f0174baaec04e01a299ac43d1686b04d93000af81"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 50068771,
        "transactionHash": "0x66b43e0da379dfccb65a383eb07d618fd810849074dc0fa94d1b588c1daa1459",
        "address": "0x004AEd2b1Dd2F95D8AC7f5C99276FD49A807a857",
        "topics": [
          "0xf9379a04548d43557a3776d3a8d84c311dc0f769747526985c7b020600e6f156",
          "0x000000000000000000000000deaddeaddeaddeaddeaddeaddeaddeaddead1111",
          "0x000000000000000000000000319b69888b0d11cec22caa5034e25fffbdc88421"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x5e53395d7a0636396d45193f0174baaec04e01a299ac43d1686b04d93000af81"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 50068771,
        "transactionHash": "0x66b43e0da379dfccb65a383eb07d618fd810849074dc0fa94d1b588c1daa1459",
        "address": "0x004AEd2b1Dd2F95D8AC7f5C99276FD49A807a857",
        "topics": [
          "0xf9379a04548d43557a3776d3a8d84c311dc0f769747526985c7b020600e6f156",
          "0x000000000000000000000000deaddeaddeaddeaddeaddeaddeaddeaddead1111",
          "0x000000000000000000000000cfa5ae7c2ce8fadc6426c1ff872ca45378fb7cf3"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x5e53395d7a0636396d45193f0174baaec04e01a299ac43d1686b04d93000af81"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 50068771,
        "transactionHash": "0x66b43e0da379dfccb65a383eb07d618fd810849074dc0fa94d1b588c1daa1459",
        "address": "0x004AEd2b1Dd2F95D8AC7f5C99276FD49A807a857",
        "topics": [
          "0x5c55717c3268b2c739eb5087e22a9bcf39b0d4f5a8ab89b4fff9cfe5711e4b34",
          "0x000000000000000000000000cda86a272531e8640cd7f1a92c01839911b90bb0",
          "0x0000000000000000000000003781c839a7bf1a78b27e2639366adc6f000ea99c"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000018617070726f766528616464726573732c75696e74323536290000000000000000",
        "logIndex": 12,
        "blockHash": "0x5e53395d7a0636396d45193f0174baaec04e01a299ac43d1686b04d93000af81"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 50068771,
        "transactionHash": "0x66b43e0da379dfccb65a383eb07d618fd810849074dc0fa94d1b588c1daa1459",
        "address": "0x004AEd2b1Dd2F95D8AC7f5C99276FD49A807a857",
        "topics": [
          "0x246b022c673a2751245f84dced77afcce61bcd820ff1235276e8c1c242a78f74",
          "0x000000000000000000000000cda86a272531e8640cd7f1a92c01839911b90bb0",
          "0x095ea7b300000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003781c839a7bf1a78b27e2639366adc6f000ea99c"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x5e53395d7a0636396d45193f0174baaec04e01a299ac43d1686b04d93000af81"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 50068771,
        "transactionHash": "0x66b43e0da379dfccb65a383eb07d618fd810849074dc0fa94d1b588c1daa1459",
        "address": "0x004AEd2b1Dd2F95D8AC7f5C99276FD49A807a857",
        "topics": [
          "0x5c55717c3268b2c739eb5087e22a9bcf39b0d4f5a8ab89b4fff9cfe5711e4b34",
          "0x000000000000000000000000cda86a272531e8640cd7f1a92c01839911b90bb0",
          "0x0000000000000000000000003781c839a7bf1a78b27e2639366adc6f000ea99c"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000022696e637265617365416c6c6f77616e636528616464726573732c75696e7432353629000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 14,
        "blockHash": "0x5e53395d7a0636396d45193f0174baaec04e01a299ac43d1686b04d93000af81"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 50068771,
        "transactionHash": "0x66b43e0da379dfccb65a383eb07d618fd810849074dc0fa94d1b588c1daa1459",
        "address": "0x004AEd2b1Dd2F95D8AC7f5C99276FD49A807a857",
        "topics": [
          "0x246b022c673a2751245f84dced77afcce61bcd820ff1235276e8c1c242a78f74",
          "0x000000000000000000000000cda86a272531e8640cd7f1a92c01839911b90bb0",
          "0x3950935100000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003781c839a7bf1a78b27e2639366adc6f000ea99c"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0x5e53395d7a0636396d45193f0174baaec04e01a299ac43d1686b04d93000af81"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 50068771,
        "transactionHash": "0x66b43e0da379dfccb65a383eb07d618fd810849074dc0fa94d1b588c1daa1459",
        "address": "0x004AEd2b1Dd2F95D8AC7f5C99276FD49A807a857",
        "topics": [
          "0x5c55717c3268b2c739eb5087e22a9bcf39b0d4f5a8ab89b4fff9cfe5711e4b34",
          "0x000000000000000000000000cda86a272531e8640cd7f1a92c01839911b90bb0",
          "0x0000000000000000000000003781c839a7bf1a78b27e2639366adc6f000ea99c"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000226465637265617365416c6c6f77616e636528616464726573732c75696e7432353629000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 16,
        "blockHash": "0x5e53395d7a0636396d45193f0174baaec04e01a299ac43d1686b04d93000af81"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 50068771,
        "transactionHash": "0x66b43e0da379dfccb65a383eb07d618fd810849074dc0fa94d1b588c1daa1459",
        "address": "0x004AEd2b1Dd2F95D8AC7f5C99276FD49A807a857",
        "topics": [
          "0x246b022c673a2751245f84dced77afcce61bcd820ff1235276e8c1c242a78f74",
          "0x000000000000000000000000cda86a272531e8640cd7f1a92c01839911b90bb0",
          "0xa457c2d700000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003781c839a7bf1a78b27e2639366adc6f000ea99c"
        ],
        "data": "0x",
        "logIndex": 17,
        "blockHash": "0x5e53395d7a0636396d45193f0174baaec04e01a299ac43d1686b04d93000af81"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 50068771,
        "transactionHash": "0x66b43e0da379dfccb65a383eb07d618fd810849074dc0fa94d1b588c1daa1459",
        "address": "0x004AEd2b1Dd2F95D8AC7f5C99276FD49A807a857",
        "topics": [
          "0x784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a4",
          "0x000000000000000000000000cda86a272531e8640cd7f1a92c01839911b90bb0"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0x5e53395d7a0636396d45193f0174baaec04e01a299ac43d1686b04d93000af81"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 50068771,
        "transactionHash": "0x66b43e0da379dfccb65a383eb07d618fd810849074dc0fa94d1b588c1daa1459",
        "address": "0x004AEd2b1Dd2F95D8AC7f5C99276FD49A807a857",
        "topics": [
          "0xf9379a04548d43557a3776d3a8d84c311dc0f769747526985c7b020600e6f156",
          "0x000000000000000000000000cda86a272531e8640cd7f1a92c01839911b90bb0",
          "0x000000000000000000000000319b69888b0d11cec22caa5034e25fffbdc88421"
        ],
        "data": "0x",
        "logIndex": 19,
        "blockHash": "0x5e53395d7a0636396d45193f0174baaec04e01a299ac43d1686b04d93000af81"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 50068771,
        "transactionHash": "0x66b43e0da379dfccb65a383eb07d618fd810849074dc0fa94d1b588c1daa1459",
        "address": "0x004AEd2b1Dd2F95D8AC7f5C99276FD49A807a857",
        "topics": [
          "0xf9379a04548d43557a3776d3a8d84c311dc0f769747526985c7b020600e6f156",
          "0x000000000000000000000000cda86a272531e8640cd7f1a92c01839911b90bb0",
          "0x000000000000000000000000cfa5ae7c2ce8fadc6426c1ff872ca45378fb7cf3"
        ],
        "data": "0x",
        "logIndex": 20,
        "blockHash": "0x5e53395d7a0636396d45193f0174baaec04e01a299ac43d1686b04d93000af81"
      }
    ],
    "blockNumber": 50068771,
    "cumulativeGasUsed": "3454365",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
    "0xFa65d4D1bDeEDaA3C2E4d9D94dCE29c46ff846cd",
    [
      [
        "0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111",
        [
          "0x788dC3af7B62708b752d483a6E30d1Cf23c3EaAe",
          "0x9b8a1B5d2f1BcC95d1CEab97FA9e063464418925",
          "0x319B69888b0d11cEC22caA5034e25FfFBDc88421",
          "0xCFa5aE7c2CE8Fadc6426C1ff872cA45378Fb7cF3"
        ]
      ],
      [
        "0xcDA86A272531e8640cD7F1a92c01839911B90bb0",
        [
          "0x319B69888b0d11cEC22caA5034e25FfFBDc88421",
          "0xCFa5aE7c2CE8Fadc6426C1ff872cA45378Fb7cF3"
        ]
      ]
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "74e342ea685e2fc8a5d13b8ff8b8408d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeMultiSendContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"spenders\",\"type\":\"address[]\"}],\"internalType\":\"struct ERC20ApproveAuthorization.TokenSpenders[]\",\"name\":\"tokenSpenders_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"func_\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"}],\"name\":\"AddContractFunc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"funcSig_\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"}],\"name\":\"AddContractFuncSig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"NewGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"func_\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"}],\"name\":\"RemoveContractFunc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"funcSig_\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"}],\"name\":\"RemoveContractFuncSig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acl_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"}],\"name\":\"SetContractACL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"TokenSpenderAdded\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAFE_MULITSEND_FUNC_MULTI_SEND\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"acl_\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"funcList_\",\"type\":\"string[]\"}],\"name\":\"addContractFuncs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"acl_\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"funcSigList_\",\"type\":\"bytes4[]\"}],\"name\":\"addContractFuncsSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"spenders\",\"type\":\"address[]\"}],\"internalType\":\"struct ERC20ApproveAuthorization.TokenSpenders[]\",\"name\":\"tokenSpendersList_\",\"type\":\"tuple[]\"}],\"name\":\"addTokenSpenders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Type.TxData\",\"name\":\"txData_\",\"type\":\"tuple\"}],\"name\":\"authorizationCheckTransaction\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"internalType\":\"struct Type.CheckResult\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"caller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forbidGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"name\":\"getACLByContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"name\":\"getFunctionsByContract\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenSpenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"funcList_\",\"type\":\"string[]\"}],\"name\":\"removeContractFuncs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"funcSigList_\",\"type\":\"bytes4[]\"}],\"name\":\"removeContractFuncsSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"spenders\",\"type\":\"address[]\"}],\"internalType\":\"struct ERC20ApproveAuthorization.TokenSpenders[]\",\"name\":\"tokenSpendersList_\",\"type\":\"tuple[]\"}],\"name\":\"removeTokenSpenders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeMultiSendContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"acl_\",\"type\":\"address\"}],\"name\":\"setContractACL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernor_\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/authorizations/ERC20ApproveAuthorization.sol\":\"ERC20ApproveAuthorization\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031373036313637333939303938\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"src/authorizations/ERC20ApproveAuthorization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {EnumerableSet} from \\\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {Type} from \\\"../common/Type.sol\\\";\\nimport {FunctionAuthorization} from \\\"../common/FunctionAuthorization.sol\\\";\\nimport {Governable} from \\\"../utils/Governable.sol\\\";\\n\\ncontract ERC20ApproveAuthorization is FunctionAuthorization {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    string public constant NAME = \\\"SolvVaultGuardian_ERC20ApproveAuthorization\\\";\\n    int256 public constant VERSION = 1;\\n\\n    string internal constant ERC20_APPROVE_FUNC = \\\"approve(address,uint256)\\\";\\n    string internal constant ERC20_INCREASE_ALLOWANCE_FUNC = \\\"increaseAllowance(address,uint256)\\\";\\n    string internal constant ERC20_DECREASE_ALLOWANCE_FUNC = \\\"decreaseAllowance(address,uint256)\\\";\\n    \\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    event TokenAdded(address indexed token);\\n    event TokenRemoved(address indexed token);\\n    event TokenSpenderAdded(address indexed token, address indexed spender);\\n\\n    address public safeAccount;\\n    string[] internal _approveFuncs;\\n\\n    EnumerableSet.AddressSet internal _tokenSet;\\n    mapping(address => EnumerableSet.AddressSet) internal _allowedTokenSpenders;\\n\\n    struct TokenSpenders {\\n        address token;\\n        address[] spenders;\\n    }\\n\\n    constructor(address safeMultiSendContract_, address caller_, TokenSpenders[] memory tokenSpenders_)\\n        FunctionAuthorization(safeMultiSendContract_, caller_, Governable(caller_).governor())\\n    {\\n        _approveFuncs = new string[](3);\\n        _approveFuncs[0] = ERC20_APPROVE_FUNC;\\n        _approveFuncs[1] = ERC20_INCREASE_ALLOWANCE_FUNC;\\n        _approveFuncs[2] = ERC20_DECREASE_ALLOWANCE_FUNC;\\n        _addTokenSpenders(tokenSpenders_);\\n    }\\n\\n    function addTokenSpenders(TokenSpenders[] calldata tokenSpendersList_) external virtual onlyGovernor {\\n        _addTokenSpenders(tokenSpendersList_);\\n    }\\n\\n    function removeTokenSpenders(TokenSpenders[] calldata tokenSpendersList_) external virtual onlyGovernor {\\n        _removeTokenSpenders(tokenSpendersList_);\\n    }\\n\\n    function _addTokenSpenders(TokenSpenders[] memory _tokenSpendersList) internal virtual {\\n        for (uint256 i = 0; i < _tokenSpendersList.length; i++) {\\n            _addTokenSpenders(_tokenSpendersList[i]);\\n        }\\n    }\\n\\n    function _removeTokenSpenders(TokenSpenders[] memory _tokenSpendersList) internal virtual {\\n        for (uint256 i = 0; i < _tokenSpendersList.length; i++) {\\n            _removeTokenSpenders(_tokenSpendersList[i]);\\n        }\\n    }\\n\\n    function _addTokenSpenders(TokenSpenders memory _tokenSpenders) internal virtual {\\n        address token = _tokenSpenders.token;\\n        address[] memory spenders = _tokenSpenders.spenders;\\n        if (_tokenSet.add(token)) {\\n            _addContractFuncs(token, _approveFuncs);\\n            emit TokenAdded(token);\\n        }\\n        for (uint256 i = 0; i < spenders.length; i++) {\\n            if (_allowedTokenSpenders[token].add(spenders[i])) {\\n                emit TokenSpenderAdded(token, spenders[i]);\\n            }\\n        }\\n    }\\n\\n    function _removeTokenSpenders(TokenSpenders memory _tokenSpenders) internal virtual {\\n        address token = _tokenSpenders.token;\\n        address[] memory spenders = _tokenSpenders.spenders;\\n        for (uint256 i = 0; i < spenders.length; i++) {\\n            if (_allowedTokenSpenders[token].remove(spenders[i])) {\\n                emit TokenSpenderAdded(token, spenders[i]);\\n            }\\n        }\\n        if (_allowedTokenSpenders[token].length() == 0) {\\n            if (_tokenSet.remove(token)) {\\n                _removeContractFuncs(token, _approveFuncs);\\n                emit TokenRemoved(token);\\n            }\\n        }\\n    }\\n\\n    function getAllTokens() external view returns (address[] memory) {\\n        return _tokenSet.values();\\n    }\\n\\n    function getTokenSpenders(address token) external view returns (address[] memory) {\\n        return _allowedTokenSpenders[token].values();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x60ce648d6fefa3b43566a592d33a45887057cf2c128a177fc3a946079dbd69cb\",\"license\":\"MIT\"},\"src/common/BaseACL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Type} from \\\"./Type.sol\\\";\\n\\nabstract contract BaseACL {\\n    address public caller;\\n    address public safeAccount;\\n    address public solvGuard;\\n\\n    constructor(address caller_) {\\n        caller = caller_;\\n    }\\n\\n    modifier onlyCaller() virtual {\\n        require(msg.sender == caller, \\\"onlyCaller\\\");\\n        _;\\n    }\\n\\n    function preCheck(address from_, address to_, bytes calldata data_, uint256 value_)\\n        external\\n        virtual\\n        onlyCaller\\n        returns (Type.CheckResult memory result_)\\n    {\\n        result_ = _preCheck(from_, to_, data_, value_);\\n    }\\n\\n    function _preCheck(address from_, address to_, bytes calldata data_, uint256 value_)\\n        internal\\n        virtual\\n        returns (Type.CheckResult memory result_)\\n    {\\n        (bool success, bytes memory revertData) =\\n            address(this).staticcall(_packTxn(Type.TxData(from_, to_, value_, data_)));\\n        result_ = _parseReturnData(success, revertData);\\n    }\\n\\n    function _parseReturnData(bool success, bytes memory revertData)\\n        internal\\n        pure\\n        returns (Type.CheckResult memory result_)\\n    {\\n        if (success) {\\n            // ACL checking functions should not return any bytes which differs from normal view functions.\\n            require(revertData.length == 0, \\\"ACL Function return non empty\\\");\\n            result_.success = true;\\n        } else {\\n            if (revertData.length < 68) {\\n                // 8(bool) + 32(length)\\n                result_.message = string(revertData);\\n            } else {\\n                assembly {\\n                    // Slice the sighash.\\n                    revertData := add(revertData, 0x04)\\n                }\\n                result_.message = abi.decode(revertData, (string));\\n            }\\n        }\\n    }\\n\\n    function _packTxn(Type.TxData memory txData_) internal pure virtual returns (bytes memory) {\\n        bytes memory txnData = abi.encode(txData_);\\n        bytes memory callDataSize = abi.encode(txData_.data.length);\\n        return abi.encodePacked(txData_.data, txnData, callDataSize);\\n    }\\n\\n    function _unpackTxn() internal view virtual returns (Type.TxData memory txData_) {\\n        uint256 end = msg.data.length;\\n        uint256 callDataSize = abi.decode(msg.data[end - 32:end], (uint256));\\n        txData_ = abi.decode(msg.data[callDataSize:], (Type.TxData));\\n    }\\n\\n    function _txn() internal view virtual returns (Type.TxData memory) {\\n        return _unpackTxn();\\n    }\\n\\n    function _checkValueZero() internal view virtual {\\n        require(_txn().value == 0, \\\"Value not zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xbbfab0ed4a93a4f1ffe3bb12a8d8c5375973a1e651289aa09aae6d815fccb76d\",\"license\":\"MIT\"},\"src/common/BaseAuthorization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Type} from \\\"./Type.sol\\\";\\nimport {Governable} from \\\"../utils/Governable.sol\\\";\\n\\nabstract contract BaseAuthorization is Governable {\\n    address public caller;\\n\\n    modifier onlyCaller() {\\n        if (msg.sender != caller) {\\n            revert(\\\"BaseAuthorization: onlySelf\\\");\\n        }\\n        _;\\n    }\\n\\n    constructor(address caller_, address governor_) Governable(governor_) {\\n        caller = caller_;\\n    }\\n\\n    fallback() external {\\n        // We don't revert on fallback to avoid issues in case of a Safe upgrade\\n        // E.g. The expected check method might change and then the Safe would be locked.\\n    }\\n\\n    function authorizationCheckTransaction(Type.TxData calldata txData_)\\n        external\\n        virtual\\n        onlyCaller\\n        returns (Type.CheckResult memory)\\n    {\\n        return _authorizationCheckTransaction(txData_);\\n    }\\n\\n    function _authorizationCheckTransaction(Type.TxData calldata txData_)\\n        internal\\n        virtual\\n        returns (Type.CheckResult memory);\\n}\\n\",\"keccak256\":\"0xf4c085d14add495be7974b6f043b3adf6b0165bf1051fd0ad133681b7f8c0b44\",\"license\":\"MIT\"},\"src/common/FunctionAuthorization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {EnumerableSet} from \\\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {Type} from \\\"../common/Type.sol\\\";\\nimport {BaseAuthorization} from \\\"../common/BaseAuthorization.sol\\\";\\nimport {BaseACL} from \\\"../common/BaseACL.sol\\\";\\nimport {Multicall} from \\\"../utils/Multicall.sol\\\";\\n\\nabstract contract FunctionAuthorization is BaseAuthorization, Multicall {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    string public constant SAFE_MULITSEND_FUNC_MULTI_SEND = \\\"multiSend(bytes)\\\";\\n\\n    event AddContractFunc(address indexed contract_, string func_, address indexed sender_);\\n    event AddContractFuncSig(address indexed contract_, bytes4 indexed funcSig_, address indexed sender_);\\n    event RemoveContractFunc(address indexed contract_, string func_, address indexed sender_);\\n    event RemoveContractFuncSig(address indexed contract_, bytes4 indexed funcSig_, address indexed sender_);\\n    event SetContractACL(address indexed contract_, address indexed acl_, address indexed sender_);\\n\\n    address public immutable safeMultiSendContract;\\n    EnumerableSet.AddressSet internal _contracts;\\n    mapping(address => EnumerableSet.Bytes32Set) internal _allowedContractToFunctions;\\n    //contract => acl\\n    mapping(address => address) internal _contractACL;\\n\\n    constructor(address safeMultiSendContract_, address caller_, address governor_)\\n        BaseAuthorization(caller_, governor_)\\n    {\\n        safeMultiSendContract = safeMultiSendContract_;\\n    }\\n\\n    function addContractFuncs(address contract_, address acl_, string[] memory funcList_)\\n        external\\n        virtual\\n        onlyGovernor\\n    {\\n        _addContractFuncs(contract_, funcList_);\\n        if (acl_ != address(0)) {\\n            _setContractACL(contract_, acl_);\\n        }\\n    }\\n\\n    function removeContractFuncs(address contract_, string[] calldata funcList_) external virtual onlyGovernor {\\n        _removeContractFuncs(contract_, funcList_);\\n    }\\n\\n    function addContractFuncsSig(address contract_, address acl_, bytes4[] calldata funcSigList_)\\n        external\\n        virtual\\n        onlyGovernor\\n    {\\n        _addContractFuncsSig(contract_, funcSigList_);\\n        if (acl_ != address(0)) {\\n            _setContractACL(contract_, acl_);\\n        }\\n    }\\n\\n    function removeContractFuncsSig(address contract_, bytes4[] calldata funcSigList_) external virtual onlyGovernor {\\n        _removeContractFuncsSig(contract_, funcSigList_);\\n    }\\n\\n    function setContractACL(address contract_, address acl_) external virtual onlyGovernor {\\n        _setContractACL(contract_, acl_);\\n    }\\n\\n    function getAllContracts() public view virtual returns (address[] memory) {\\n        return _contracts.values();\\n    }\\n\\n    function getFunctionsByContract(address contract_) public view virtual returns (bytes32[] memory) {\\n        return _allowedContractToFunctions[contract_].values();\\n    }\\n\\n    function getACLByContract(address contract_) external view virtual returns (address) {\\n        return _contractACL[contract_];\\n    }\\n\\n    function _addContractFuncs(address contract_, string[] memory funcList_) internal virtual {\\n        require(funcList_.length > 0, \\\"FunctionAuthorization: empty funcList\\\");\\n\\n        for (uint256 index = 0; index < funcList_.length; index++) {\\n            bytes4 funcSelector = bytes4(keccak256(bytes(funcList_[index])));\\n            bytes32 funcSelector32 = bytes32(funcSelector);\\n            if (_allowedContractToFunctions[contract_].add(funcSelector32)) {\\n                emit AddContractFunc(contract_, funcList_[index], msg.sender);\\n                emit AddContractFuncSig(contract_, funcSelector, msg.sender);\\n            }\\n        }\\n\\n        _contracts.add(contract_);\\n    }\\n\\n    function _addContractFuncsSig(address contract_, bytes4[] memory funcSigList_) internal virtual {\\n        require(funcSigList_.length > 0, \\\"FunctionAuthorization: empty funcList\\\");\\n\\n        for (uint256 index = 0; index < funcSigList_.length; index++) {\\n            bytes32 funcSelector32 = bytes32(funcSigList_[index]);\\n            if (_allowedContractToFunctions[contract_].add(funcSelector32)) {\\n                emit AddContractFuncSig(contract_, funcSigList_[index], msg.sender);\\n            }\\n        }\\n\\n        _contracts.add(contract_);\\n    }\\n\\n    function _removeContractFuncs(address contract_, string[] memory funcList_) internal virtual {\\n        require(funcList_.length > 0, \\\"FunctionAuthorization: empty funcList\\\");\\n\\n        for (uint256 index = 0; index < funcList_.length; index++) {\\n            bytes4 funcSelector = bytes4(keccak256(bytes(funcList_[index])));\\n            bytes32 funcSelector32 = bytes32(funcSelector);\\n            if (_allowedContractToFunctions[contract_].remove(funcSelector32)) {\\n                emit RemoveContractFunc(contract_, funcList_[index], msg.sender);\\n                emit RemoveContractFuncSig(contract_, funcSelector, msg.sender);\\n            }\\n        }\\n\\n        if (_allowedContractToFunctions[contract_].length() == 0) {\\n            delete _contractACL[contract_];\\n            _contracts.remove(contract_);\\n        }\\n    }\\n\\n    function _removeContractFuncsSig(address contract_, bytes4[] calldata funcSigList_) internal virtual {\\n        require(funcSigList_.length > 0, \\\"FunctionAuthorization: empty funcList\\\");\\n\\n        for (uint256 index = 0; index < funcSigList_.length; index++) {\\n            bytes32 funcSelector32 = bytes32(funcSigList_[index]);\\n            if (_allowedContractToFunctions[contract_].remove(funcSelector32)) {\\n                emit RemoveContractFuncSig(contract_, funcSigList_[index], msg.sender);\\n            }\\n        }\\n\\n        if (_allowedContractToFunctions[contract_].length() == 0) {\\n            delete _contractACL[contract_];\\n            _contracts.remove(contract_);\\n        }\\n    }\\n\\n    function _setContractACL(address contract_, address acl_) internal virtual {\\n        _contractACL[contract_] = acl_;\\n        emit SetContractACL(contract_, acl_, msg.sender);\\n    }\\n\\n    function _authorizationCheckTransaction(Type.TxData calldata txData_)\\n        internal\\n        virtual\\n        override\\n        returns (Type.CheckResult memory result)\\n    {\\n        return _authorizationCheckTransactionWithRecursion(txData_.from, txData_.to, txData_.data, txData_.value);\\n    }\\n\\n    function _authorizationCheckTransactionWithRecursion(\\n        address from_,\\n        address to_,\\n        bytes calldata data_,\\n        uint256 value_\\n    ) internal virtual returns (Type.CheckResult memory result_) {\\n        if (data_.length == 0) {\\n            return _checkNativeTransfer(to_, value_);\\n        }\\n\\n        if (data_.length < 4) {\\n            result_.success = false;\\n            result_.message = \\\"FunctionAuthorization: invalid txData\\\";\\n            return result_;\\n        }\\n\\n        bytes4 selector = _getSelector(data_);\\n\\n        if (to_ == safeMultiSendContract && selector == bytes4(keccak256(bytes(SAFE_MULITSEND_FUNC_MULTI_SEND)))) {\\n            result_ = _checkMultiSend(from_, to_, data_, value_);\\n        } else {\\n            result_ = _checkSingleTx(from_, to_, data_, value_);\\n        }\\n    }\\n\\n    function _checkMultiSend(address from_, address, /* to_ */ bytes calldata transactions_, uint256 /* value_ */ )\\n        internal\\n        virtual\\n        returns (Type.CheckResult memory result_)\\n    {\\n        uint256 multiSendDataLength = uint256(bytes32(transactions_[4 + 32:4 + 32 + 32]));\\n        bytes calldata multiSendData = transactions_[4 + 32 + 32:4 + 32 + 32 + multiSendDataLength];\\n        uint256 startIndex = 0;\\n        while (startIndex < multiSendData.length) {\\n            (address to, uint256 value, bytes calldata data, uint256 endIndex) =\\n                _unpackMultiSend(multiSendData, startIndex);\\n            if (to != address(0)) {\\n                result_ = _authorizationCheckTransactionWithRecursion(from_, to, data, value);\\n                if (!result_.success) {\\n                    return result_;\\n                }\\n            }\\n\\n            startIndex = endIndex;\\n        }\\n\\n        result_.success = true;\\n    }\\n\\n    function _unpackMultiSend(bytes calldata transactions_, uint256 startIndex_)\\n        internal\\n        pure\\n        virtual\\n        returns (address to_, uint256 value_, bytes calldata data_, uint256 endIndex_)\\n    {\\n        uint256 offset = 0;\\n        uint256 length = 1;\\n        offset += length;\\n\\n        //address 20 bytes\\n        length = 20;\\n        to_ = address(bytes20(transactions_[startIndex_ + offset:startIndex_ + offset + length]));\\n        offset += length;\\n\\n        //value 32 bytes\\n        length = 32;\\n        value_ = uint256(bytes32(transactions_[startIndex_ + offset:startIndex_ + offset + length]));\\n        offset += length;\\n\\n        //datalength 32 bytes\\n        length = 32;\\n        uint256 dataLength = uint256(bytes32(transactions_[startIndex_ + offset:startIndex_ + offset + length]));\\n        offset += length;\\n\\n        //data\\n        data_ = transactions_[startIndex_ + offset:startIndex_ + offset + dataLength];\\n\\n        endIndex_ = startIndex_ + offset + dataLength;\\n    }\\n\\n    function _checkSingleTx(address from_, address to_, bytes calldata data_, uint256 value_)\\n        internal\\n        virtual\\n        returns (Type.CheckResult memory result_)\\n    {\\n        bytes4 selector = _getSelector(data_);\\n        if (_isAllowedSelector(to_, selector)) {\\n            result_.success = true;\\n            //if allowed, check acl\\n            if (_contractACL[to_] != address(0)) {\\n                try BaseACL(_contractACL[to_]).preCheck(from_, to_, data_, value_) returns (\\n                    Type.CheckResult memory result\\n                ) {\\n                    return result;\\n                } catch Error(string memory reason) {\\n                    result_.success = false;\\n                    result_.message = reason;\\n                } catch (bytes memory reason) {\\n                    result_.success = false;\\n                    result_.message = string(reason);\\n                }\\n            }\\n        } else {\\n            result_.success = false;\\n            result_.message = \\\"FunctionAuthorization: not allowed function\\\";\\n        }\\n    }\\n\\n    function _isAllowedSelector(address target_, bytes4 selector_) internal view virtual returns (bool) {\\n        return _allowedContractToFunctions[target_].contains(selector_);\\n    }\\n\\n    function _getSelector(bytes calldata data_) internal pure virtual returns (bytes4 selector_) {\\n        assembly {\\n            selector_ := calldataload(data_.offset)\\n        }\\n    }\\n\\n    // to allow native token transferring, must override this function\\n    function _checkNativeTransfer(address, /* to */ uint256 /* value_ */ )\\n        internal\\n        view\\n        virtual\\n        returns (Type.CheckResult memory result_)\\n    {\\n        result_.success = false;\\n        result_.message = \\\"FunctionAuthorization: native token transfer not allowed\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x9ab967c5670a4380d870c52725e58609a5a5c8fbc0d8fa6ee3e6cf0483be954a\",\"license\":\"MIT\"},\"src/common/Type.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Type {\\n\\tstruct TxData {\\n\\t\\taddress from; //msg.sender\\n\\t\\taddress to;\\n\\t\\tuint256 value;\\n\\t\\tbytes data; //calldata\\n\\t}\\n\\n\\tstruct CheckResult {\\n\\t\\tbool success;\\n\\t\\tstring message;\\n\\t}\\n}\",\"keccak256\":\"0x0cb883087ccdd40779544fb3e4adcd9951ee8d9be2e8c2836fc1f174f8cecf0b\",\"license\":\"MIT\"},\"src/utils/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Governable {\\n    event NewGovernor(address indexed previousGovernor, address indexed newGovernor);\\n\\n    address public governor;\\n    bool public governanceAllowed = true;\\n\\n    constructor(address governor_) {\\n        _transferGovernance(governor_);\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(governanceAllowed && governor == msg.sender, \\\"Governable: only governor\\\");\\n        _;\\n    }\\n\\n    function forbidGovernance() external onlyGovernor {\\n        governanceAllowed = false;\\n    }\\n\\n    function transferGovernance(address newGovernor_) public onlyGovernor {\\n        _transferGovernance(newGovernor_);\\n    }\\n\\n    function _transferGovernance(address newGovernor_) internal {\\n        require(newGovernor_ != address(0), \\\"Governable: new governor is the zero address\\\");\\n        address oldGovernor = governor;\\n        governor = newGovernor_;\\n        emit NewGovernor(oldGovernor, newGovernor_);\\n    }\\n}\\n\",\"keccak256\":\"0xdaeeec6201b98844074847f3161a535fccbeb87ceee6a39a58546297cb32e77c\",\"license\":\"MIT\"},\"src/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\nabstract contract Multicall {\\n\\t/**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n\\n        for (uint256 i; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n            if (!success) {\\n                _revertWithParsedMessage(result);\\n            }\\n\\n            results[i] = result;\\n        }\\n\\n        return results;\\n    }\\n\\n\\t  function _revertWithParsedMessage(bytes memory result) internal pure {\\n        (string memory revertMessage, bool hasRevertMessage) = _getRevertMessage(result);\\n\\n        if (hasRevertMessage) {\\n            revert(revertMessage);\\n        } else {\\n            _revertWithCustomError(result);\\n        }\\n    }\\n\\n    function _revertWithCustomError(bytes memory result) internal pure {\\n        // referenced from https://ethereum.stackexchange.com/a/123588\\n        uint256 length = result.length;\\n        assembly {\\n            revert(add(result, 0x20), length)\\n        }\\n    }\\n\\n\\t // To get the revert reason, referenced from https://ethereum.stackexchange.com/a/83577\\n    function _getRevertMessage(bytes memory result) internal pure returns (string memory, bool) {\\n        // If the result length is less than 68, then the transaction either panicked or failed silently\\n        if (result.length < 68) {\\n            return (\\\"\\\", false);\\n        }\\n\\n        bytes4 errorSelector = _getErrorSelectorFromData(result);\\n\\n        // 0x08c379a0 is the selector for Error(string)\\n        // referenced from https://blog.soliditylang.org/2021/04/21/custom-errors/\\n        if (errorSelector == bytes4(0x08c379a0)) {\\n            assembly {\\n                result := add(result, 0x04)\\n            }\\n\\n            return (abi.decode(result, (string)), true);\\n        }\\n\\n        // error may be a custom error, return an empty string for this case\\n        return (\\\"\\\", false);\\n    }\\n\\n\\n    function _getErrorSelectorFromData(bytes memory data) internal pure returns (bytes4) {\\n        bytes4 errorSelector;\\n\\n        assembly {\\n            errorSelector := mload(add(data, 0x20))\\n        }\\n\\n        return errorSelector;\\n    }\\n\\n}\",\"keccak256\":\"0x44b7fb18afdf38fd84b7a8e80172696a4bc0167a5d555dc4d4f3a91d7c021cca\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526000805460ff60a01b1916600160a01b1790553480156200002457600080fd5b506040516200353d3803806200353d833981016040819052620000479162000932565b8282836001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000088573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ae919062000ade565b818180620000bc8162000235565b5050600180546001600160a01b0319166001600160a01b0392831617905592909216608090815260408051600380825292810190915292509050602082015b6060815260200190600190039081620000fb57505080516200012691600791602090910190620007a4565b506040518060400160405280601881526020017f617070726f766528616464726573732c75696e74323536290000000000000000815250600760008154811062000174576200017462000afc565b9060005260206000200190816200018c919062000ba0565b50604051806060016040528060228152602001620034f9602291396007600181548110620001be57620001be62000afc565b906000526020600020019081620001d6919062000ba0565b506040518060600160405280602281526020016200351b60229139600760028154811062000208576200020862000afc565b90600052602060002001908162000220919062000ba0565b506200022c81620002f6565b50505062000ce4565b6001600160a01b038116620002a65760405162461bcd60e51b815260206004820152602c60248201527f476f7665726e61626c653a206e657720676f7665726e6f72206973207468652060448201526b7a65726f206164647265737360a01b60648201526084015b60405180910390fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f1ba669d4a78521f2ad26e8e0fcbcdd626a63f34d68f326bc232a3abe2a5d042a9190a35050565b60005b81518110156200034557620003308282815181106200031c576200031c62000afc565b60200260200101516200034960201b60201c565b806200033c8162000c6c565b915050620002f9565b5050565b8051602080830151906200036b906008908490620008f762000565821b17901c565b156200048e5762000459826007805480602002602001604051908101604052809291908181526020016000905b828210156200044e578382906000526020600020018054620003ba9062000b12565b80601f0160208091040260200160405190810160405280929190818152602001828054620003e89062000b12565b8015620004395780601f106200040d5761010080835404028352916020019162000439565b820191906000526020600020905b8154815290600101906020018083116200041b57829003601f168201915b50505050508152602001906001019062000398565b505062000585915050565b6040516001600160a01b038316907f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a490600090a25b60005b81518110156200055f57620004e7828281518110620004b457620004b462000afc565b6020908102919091018101516001600160a01b0386166000908152600a83526040902091620008f762000565821b17901c565b156200054a5781818151811062000502576200050262000afc565b60200260200101516001600160a01b0316836001600160a01b03167ff9379a04548d43557a3776d3a8d84c311dc0f769747526985c7b020600e6f15660405160405180910390a35b80620005568162000c6c565b91505062000491565b50505050565b60006200057c836001600160a01b03841662000744565b90505b92915050565b6000815111620005e65760405162461bcd60e51b815260206004820152602560248201527f46756e6374696f6e417574686f72697a6174696f6e3a20656d7074792066756e60448201526418d31a5cdd60da1b60648201526084016200029d565b60005b8151811015620007235760008282815181106200060a576200060a62000afc565b6020908102919091018101518051908201206001600160a01b038616600090815260048352604090209092506001600160e01b031983169162000659919083906200091362000796821b17901c565b156200070b57336001600160a01b0316856001600160a01b03167f5c55717c3268b2c739eb5087e22a9bcf39b0d4f5a8ab89b4fff9cfe5711e4b34868681518110620006a957620006a962000afc565b6020026020010151604051620006c0919062000c94565b60405180910390a360405133906001600160e01b03198416906001600160a01b038816907f246b022c673a2751245f84dced77afcce61bcd820ff1235276e8c1c242a78f7490600090a45b505080806200071a9062000c6c565b915050620005e9565b506200073f8260026200056560201b620008f71790919060201c565b505050565b60008181526001830160205260408120546200078d575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200057f565b5060006200057f565b60006200057c838362000744565b828054828255906000526020600020908101928215620007ef579160200282015b82811115620007ef5782518290620007de908262000ba0565b5091602001919060010190620007c5565b50620007fd92915062000801565b5090565b80821115620007fd57600062000818828262000822565b5060010162000801565b508054620008309062000b12565b6000825580601f1062000841575050565b601f01602090049060005260206000209081019062000861919062000864565b50565b5b80821115620007fd576000815560010162000865565b80516001600160a01b03811681146200089357600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715620008d357620008d362000898565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000904576200090462000898565b604052919050565b60006001600160401b0382111562000928576200092862000898565b5060051b60200190565b6000806000606084860312156200094857600080fd5b62000953846200087b565b925062000963602085016200087b565b60408501519092506001600160401b03808211156200098157600080fd5b818601915086601f8301126200099657600080fd5b8151620009ad620009a7826200090c565b620008d9565b8082825260208201915060208360051b860101925089831115620009d057600080fd5b602085015b8381101562000ace57805185811115620009ee57600080fd5b86016040818d03601f1901121562000a0557600080fd5b62000a0f620008ae565b62000a1d602083016200087b565b815260408201518781111562000a3257600080fd5b8083019250508c603f83011262000a4857600080fd5b602082015162000a5c620009a7826200090c565b808282526020820191506020808460051b8701010192508f83111562000a8157600080fd5b6040850194505b8285101562000aae5762000a9c856200087b565b82526020948501949091019062000a88565b8060208501525050508085525050602083019250602081019050620009d5565b5080955050505050509250925092565b60006020828403121562000af157600080fd5b6200057c826200087b565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168062000b2757607f821691505b60208210810362000b4857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200073f57600081815260208120601f850160051c8101602086101562000b775750805b601f850160051c820191505b8181101562000b985782815560010162000b83565b505050505050565b81516001600160401b0381111562000bbc5762000bbc62000898565b62000bd48162000bcd845462000b12565b8462000b4e565b602080601f83116001811462000c0c576000841562000bf35750858301515b600019600386901b1c1916600185901b17855562000b98565b600085815260208120601f198616915b8281101562000c3d5788860151825594840194600190910190840162000c1c565b508582101562000c5c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006001820162000c8d57634e487b7160e01b600052601160045260246000fd5b5060010190565b600060208083528351808285015260005b8181101562000cc35785810183015185820160400152820162000ca5565b506000604082860101526040601f19601f8301168501019250505092915050565b6080516127f262000d076000396000818161022201526111af01526127f26000f3fe608060405234801561001057600080fd5b506004361061014f5760003560e01c806370c2ded5116100bd578063ac237ab011610079578063ac237ab014610331578063ac9650d814610344578063d38bfff414610364578063f486186d14610377578063fc9c8d391461037f578063ffa1ad741461039257005b806370c2ded5146102a457806373339381146102c457806394e9d044146102d7578063a2d96210146102ea578063a3f4df7e146102fd578063a3fb76a51461030557005b806336a6c8611161010c57806336a6c861146101e457806347263232146101f7578063476ed36d1461020a57806352797b3e1461021d5780635ce5fb0a14610244578063656abb9c1461026857005b80630c340a241461015157806314fda027146101815780631576f83f1461019457806318d3ce96146101a75780632a5c792a146101bc5780633504a49f146101c4575b005b600054610164906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61014f61018f366004611ca9565b6103a8565b600654610164906001600160a01b031681565b6101af61044c565b6040516101789190611d09565b6101af61045d565b6101d76101d2366004611d56565b610469565b6040516101789190611de0565b61014f6101f2366004611e0f565b6104e9565b61014f610205366004611e42565b610536565b61014f610218366004611e83565b610587565b6101647f000000000000000000000000000000000000000000000000000000000000000081565b60005461025890600160a01b900460ff1681565b6040519015158152602001610178565b6102976040518060400160405280601081526020016f6d756c746953656e642862797465732960801b81525081565b6040516101789190611ed5565b6102b76102b2366004611ee8565b6105de565b6040516101789190611f03565b61014f6102d2366004611e42565b610602565b61014f6102e5366004611e83565b610653565b61014f6102f83660046120b5565b61069d565b6102976106ff565b610164610313366004611ee8565b6001600160a01b039081166000908152600560205260409020541690565b6101af61033f366004611ee8565b61071b565b610357610352366004611e42565b61073f565b6040516101789190612126565b61014f610372366004611ee8565b61085e565b61014f6108a9565b600154610164906001600160a01b031681565b61039a600181565b604051908152602001610178565b600054600160a01b900460ff1680156103cb57506000546001600160a01b031633145b6103f05760405162461bcd60e51b81526004016103e790612188565b60405180910390fd5b61042d8483838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061091f92505050565b6001600160a01b03831615610446576104468484610a34565b50505050565b60606104586002610a8e565b905090565b60606104586008610a8e565b6040805180820190915260008152606060208201526001546001600160a01b031633146104d85760405162461bcd60e51b815260206004820152601b60248201527f42617365417574686f72697a6174696f6e3a206f6e6c7953656c66000000000060448201526064016103e7565b6104e182610a9b565b90505b919050565b600054600160a01b900460ff16801561050c57506000546001600160a01b031633145b6105285760405162461bcd60e51b81526004016103e790612188565b6105328282610a34565b5050565b600054600160a01b900460ff16801561055957506000546001600160a01b031633145b6105755760405162461bcd60e51b81526004016103e790612188565b61053261058282846121bf565b610ae7565b600054600160a01b900460ff1680156105aa57506000546001600160a01b031633145b6105c65760405162461bcd60e51b81526004016103e790612188565b6105d9836105d483856122ea565b610b27565b505050565b6001600160a01b03811660009081526004602052604090206060906104e190610a8e565b600054600160a01b900460ff16801561062557506000546001600160a01b031633145b6106415760405162461bcd60e51b81526004016103e790612188565b61053261064e82846121bf565b610cc7565b600054600160a01b900460ff16801561067657506000546001600160a01b031633145b6106925760405162461bcd60e51b81526004016103e790612188565b6105d9838383610d07565b600054600160a01b900460ff1680156106c057506000546001600160a01b031633145b6106dc5760405162461bcd60e51b81526004016103e790612188565b6106e68382610e64565b6001600160a01b038216156105d9576105d98383610a34565b6040518060600160405280602b8152602001612792602b913981565b6001600160a01b0381166000908152600a602052604090206060906104e190610a8e565b6060816001600160401b0381111561075957610759611f3b565b60405190808252806020026020018201604052801561078c57816020015b60608152602001906001900390816107775790505b50905060005b8281101561085657600080308686858181106107b0576107b06122f7565b90506020028101906107c2919061230d565b6040516107d0929190612353565b600060405180830381855af49150503d806000811461080b576040519150601f19603f3d011682016040523d82523d6000602084013e610810565b606091505b5091509150816108235761082381610faa565b80848481518110610836576108366122f7565b60200260200101819052505050808061084e90612379565b915050610792565b505b92915050565b600054600160a01b900460ff16801561088157506000546001600160a01b031633145b61089d5760405162461bcd60e51b81526004016103e790612188565b6108a681610fe3565b50565b600054600160a01b900460ff1680156108cc57506000546001600160a01b031633145b6108e85760405162461bcd60e51b81526004016103e790612188565b6000805460ff60a01b19169055565b600061090c836001600160a01b03841661109e565b9392505050565b600061090c838361109e565b60008151116109405760405162461bcd60e51b81526004016103e790612392565b60005b8151811015610a28576000828281518110610960576109606122f7565b60200260200101516001600160e01b03191690506109ab8160046000876001600160a01b03166001600160a01b0316815260200190815260200160002061091390919063ffffffff16565b15610a1557336001600160a01b03168383815181106109cc576109cc6122f7565b60200260200101516001600160e01b031916856001600160a01b03167f246b022c673a2751245f84dced77afcce61bcd820ff1235276e8c1c242a78f7460405160405180910390a45b5080610a2081612379565b915050610943565b506105d96002836108f7565b6001600160a01b0382811660008181526005602052604080822080546001600160a01b031916948616948517905551339392917f09a226cf85d5c3f9bf762d15f165b63b555418743ec5a33495c22ef0f9240bc591a45050565b6060600061090c836110ed565b6040805180820190915260008152606060208201526104e1610ac06020840184611ee8565b610ad06040850160208601611ee8565b610add606086018661230d565b8660400135611149565b60005b815181101561053257610b15828281518110610b0857610b086122f7565b602002602001015161125a565b80610b1f81612379565b915050610aea565b6000815111610b485760405162461bcd60e51b81526004016103e790612392565b60005b8151811015610c6d576000828281518110610b6857610b686122f7565b6020908102919091018101518051908201206001600160a01b0386166000908152600490925260409091209091506001600160e01b0319821690610bac908261147b565b15610c5857336001600160a01b0316856001600160a01b03167ffed6cf2efef20378e90c3b71c30db7338ca98f5e50e3bf7c8467d8d062512ac2868681518110610bf857610bf86122f7565b6020026020010151604051610c0d9190611ed5565b60405180910390a360405133906001600160e01b03198416906001600160a01b038816907fedfbd30ca95f1e16901a73aea7daddbbbcd26a1ff975301743208f1c3badfeb190600090a45b50508080610c6590612379565b915050610b4b565b506001600160a01b0382166000908152600460205260409020610c8f90611487565b600003610532576001600160a01b038216600090815260056020526040902080546001600160a01b03191690556105d9600283611491565b60005b815181101561053257610cf5828281518110610ce857610ce86122f7565b60200260200101516114a6565b80610cff81612379565b915050610cca565b80610d245760405162461bcd60e51b81526004016103e790612392565b60005b81811015610e0a576000838383818110610d4357610d436122f7565b9050602002016020810190610d5891906123d7565b6001600160a01b03861660009081526004602052604090206001600160e01b0319919091169150610d89908261147b565b15610df75733848484818110610da157610da16122f7565b9050602002016020810190610db691906123d7565b6001600160e01b031916866001600160a01b03167fedfbd30ca95f1e16901a73aea7daddbbbcd26a1ff975301743208f1c3badfeb160405160405180910390a45b5080610e0281612379565b915050610d27565b506001600160a01b0383166000908152600460205260409020610e2c90611487565b6000036105d9576001600160a01b038316600090815260056020526040902080546001600160a01b0319169055610446600284611491565b6000815111610e855760405162461bcd60e51b81526004016103e790612392565b60005b8151811015610a28576000828281518110610ea557610ea56122f7565b6020908102919091018101518051908201206001600160a01b0386166000908152600490925260409091209091506001600160e01b0319821690610ee99082610913565b15610f9557336001600160a01b0316856001600160a01b03167f5c55717c3268b2c739eb5087e22a9bcf39b0d4f5a8ab89b4fff9cfe5711e4b34868681518110610f3557610f356122f7565b6020026020010151604051610f4a9190611ed5565b60405180910390a360405133906001600160e01b03198416906001600160a01b038816907f246b022c673a2751245f84dced77afcce61bcd820ff1235276e8c1c242a78f7490600090a45b50508080610fa290612379565b915050610e88565b600080610fb68361169a565b915091508015610fda578160405162461bcd60e51b81526004016103e79190611ed5565b6105d98361172a565b6001600160a01b03811661104e5760405162461bcd60e51b815260206004820152602c60248201527f476f7665726e61626c653a206e657720676f7665726e6f72206973207468652060448201526b7a65726f206164647265737360a01b60648201526084016103e7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f1ba669d4a78521f2ad26e8e0fcbcdd626a63f34d68f326bc232a3abe2a5d042a9190a35050565b60008181526001830160205260408120546110e557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610858565b506000610858565b60608160000180548060200260200160405190810160405280929190818152602001828054801561113d57602002820191906000526020600020905b815481526020019060010190808311611129575b50505050509050919050565b6040805180820190915260008152606060208201526000839003611178576111718583611733565b9050611251565b60048310156111a757600081526040805160608101909152602580825261274260208301396020820152611251565b6000843590507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316866001600160a01b0316148015611226575060408051808201909152601081526f6d756c746953656e642862797465732960801b6020909101526001600160e01b031981166346c07f8560e11b145b1561123f57611238878787878761176f565b915061124f565b61124c878787878761183a565b91505b505b95945050505050565b8051602082015160005b815181101561132e576112bd828281518110611282576112826122f7565b6020026020010151600a6000866001600160a01b03166001600160a01b0316815260200190815260200160002061149190919063ffffffff16565b1561131c578181815181106112d4576112d46122f7565b60200260200101516001600160a01b0316836001600160a01b03167ff9379a04548d43557a3776d3a8d84c311dc0f769747526985c7b020600e6f15660405160405180910390a35b8061132681612379565b915050611264565b506001600160a01b0382166000908152600a6020526040902061135090611487565b6000036105d957611362600883611491565b156105d957611442826007805480602002602001604051908101604052809291908181526020016000905b828210156114395783829060005260206000200180546113ac90612401565b80601f01602080910402602001604051908101604052809291908181526020018280546113d890612401565b80156114255780601f106113fa57610100808354040283529160200191611425565b820191906000526020600020905b81548152906001019060200180831161140857829003601f168201915b50505050508152602001906001019061138d565b50505050610b27565b6040516001600160a01b038316907f4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd390600090a2505050565b600061090c83836119bd565b60006104e1825490565b600061090c836001600160a01b0384166119bd565b805160208201516114b86008836108f7565b156115cd57611598826007805480602002602001604051908101604052809291908181526020016000905b8282101561158f57838290600052602060002001805461150290612401565b80601f016020809104026020016040519081016040528092919081815260200182805461152e90612401565b801561157b5780601f106115505761010080835404028352916020019161157b565b820191906000526020600020905b81548152906001019060200180831161155e57829003601f168201915b5050505050815260200190600101906114e3565b50505050610e64565b6040516001600160a01b038316907f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a490600090a25b60005b8151811015610446576116298282815181106115ee576115ee6122f7565b6020026020010151600a6000866001600160a01b03166001600160a01b031681526020019081526020016000206108f790919063ffffffff16565b1561168857818181518110611640576116406122f7565b60200260200101516001600160a01b0316836001600160a01b03167ff9379a04548d43557a3776d3a8d84c311dc0f769747526985c7b020600e6f15660405160405180910390a35b8061169281612379565b9150506115d0565b606060006044835110156116c1575050604080516020810190915260008082529092909150565b60006116ce846020015190565b90506307b9e43360e51b6001600160e01b031982160161170d5760048401935083806020019051810190611702919061248a565b946001945092505050565b600060405180602001604052806000815250909250925050915091565b80518060208301fd5b604080518082019091526000815260606020820152600081526040805160608101909152603880825261270a6020830139602082015292915050565b60408051808201909152600081526060602082015260006117946044602486886124be565b61179d916124e8565b9050366000866044876117b08683612506565b926117bd939291906124be565b9150915060005b8181101561182957600080366000806117de888888611ab0565b9398509196509450925090506001600160a01b0385161561181d576118068f86858588611149565b8051909a5061181d57505050505050505050611251565b94506117c49350505050565b505060018352505095945050505050565b604080518082019091526000815260606020820152833561185b8682611c01565b1561199257600182526001600160a01b03868116600090815260056020526040902054161561198d576001600160a01b038087166000908152600560205260409081902054905163e558cba160e01b815291169063e558cba1906118cb908a908a908a908a908a90600401612519565b6000604051808303816000875af192505050801561190b57506040513d6000823e601f3d908101601f19168201604052611908919081019061256c565b60015b61198457611917612606565b806308c379a003611944575061192b612622565b806119365750611946565b60008352602083015261124f565b505b3d808015611970576040519150601f19603f3d011682016040523d82523d6000602084013e611975565b606091505b5060008352602083015261124f565b91506112519050565b61124f565b600082526040805160608101909152602b808252612767602083013960208301525095945050505050565b60008181526001830160205260408120548015611aa65760006119e16001836126ab565b85549091506000906119f5906001906126ab565b9050818114611a5a576000866000018281548110611a1557611a156122f7565b9060005260206000200154905080876000018481548110611a3857611a386122f7565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611a6b57611a6b6126be565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610858565b6000915050610858565b600080368180806001611ac38183612506565b9150601490508989611ad5848b612506565b9083611ae1868d612506565b611aeb9190612506565b92611af8939291906124be565b611b01916126d4565b60601c9650611b108183612506565b9150602090508989611b22848b612506565b9083611b2e868d612506565b611b389190612506565b92611b45939291906124be565b611b4e916124e8565b9550611b5a8183612506565b91506020905060008a8a611b6e858c612506565b9084611b7a878e612506565b611b849190612506565b92611b91939291906124be565b611b9a916124e8565b9050611ba68284612506565b92508a8a611bb4858c612506565b9083611bc0878e612506565b611bca9190612506565b92611bd7939291906124be565b909650945080611be7848b612506565b611bf19190612506565b9350505050939792965093509350565b6001600160a01b038216600090815260046020526040812061090c906001600160e01b03198416600061090c838360009081526001919091016020526040902054151590565b80356001600160a01b03811681146104e457600080fd5b60008083601f840112611c7057600080fd5b5081356001600160401b03811115611c8757600080fd5b6020830191508360208260051b8501011115611ca257600080fd5b9250929050565b60008060008060608587031215611cbf57600080fd5b611cc885611c47565b9350611cd660208601611c47565b925060408501356001600160401b03811115611cf157600080fd5b611cfd87828801611c5e565b95989497509550505050565b6020808252825182820181905260009190848201906040850190845b81811015611d4a5783516001600160a01b031683529284019291840191600101611d25565b50909695505050505050565b600060208284031215611d6857600080fd5b81356001600160401b03811115611d7e57600080fd5b82016080818503121561090c57600080fd5b60005b83811015611dab578181015183820152602001611d93565b50506000910152565b60008151808452611dcc816020860160208601611d90565b601f01601f19169290920160200192915050565b6020815281511515602082015260006020830151604080840152611e076060840182611db4565b949350505050565b60008060408385031215611e2257600080fd5b611e2b83611c47565b9150611e3960208401611c47565b90509250929050565b60008060208385031215611e5557600080fd5b82356001600160401b03811115611e6b57600080fd5b611e7785828601611c5e565b90969095509350505050565b600080600060408486031215611e9857600080fd5b611ea184611c47565b925060208401356001600160401b03811115611ebc57600080fd5b611ec886828701611c5e565b9497909650939450505050565b60208152600061090c6020830184611db4565b600060208284031215611efa57600080fd5b61090c82611c47565b6020808252825182820181905260009190848201906040850190845b81811015611d4a57835183529284019291840191600101611f1f565b634e487b7160e01b600052604160045260246000fd5b604081018181106001600160401b0382111715611f7057611f70611f3b565b60405250565b601f8201601f191681016001600160401b0381118282101715611f9b57611f9b611f3b565b6040525050565b60006001600160401b03821115611fbb57611fbb611f3b565b5060051b60200190565b60006001600160401b03821115611fde57611fde611f3b565b50601f01601f191660200190565b6000611ff783611fa2565b604080516120058382611f76565b858152925060208084019250600586901b8501908782111561202657600080fd5b855b828110156120a95780356001600160401b038111156120475760008081fd5b8701601f81018a136120595760008081fd5b803561206481611fc5565b86516120708282611f76565b8281528c8684860101111561208757600091508182fd5b8286850187830137600092810186019290925250865250938101938101612028565b50505050509392505050565b6000806000606084860312156120ca57600080fd5b6120d384611c47565b92506120e160208501611c47565b915060408401356001600160401b038111156120fc57600080fd5b8401601f8101861361210d57600080fd5b61211c86823560208401611fec565b9150509250925092565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561217b57603f19888603018452612169858351611db4565b9450928501929085019060010161214d565b5092979650505050505050565b60208082526019908201527f476f7665726e61626c653a206f6e6c7920676f7665726e6f7200000000000000604082015260600190565b60006121ca83611fa2565b604080516121d88382611f76565b85815260208082019350600587811b8701368111156121f657600080fd5b875b818110156122dc5780356001600160401b03808211156122185760008081fd5b818b01915087823603121561222d5760008081fd5b875161223881611f51565b61224183611c47565b815286830135828111156122555760008081fd5b929092019136601f84011261226c57600091508182fd5b8235915061227982611fa2565b89516122858282611f76565b83815292871b84018801928881019150368411156122a35760008081fd5b938801935b838510156122c8576122b985611c47565b825293880193908801906122a8565b8289015250895250509583019583016121f8565b509298975050505050505050565b600061090c368484611fec565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261232457600080fd5b8301803591506001600160401b0382111561233e57600080fd5b602001915036819003821315611ca257600080fd5b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b60006001820161238b5761238b612363565b5060010190565b60208082526025908201527f46756e6374696f6e417574686f72697a6174696f6e3a20656d7074792066756e60408201526418d31a5cdd60da1b606082015260800190565b6000602082840312156123e957600080fd5b81356001600160e01b03198116811461090c57600080fd5b600181811c9082168061241557607f821691505b60208210810361243557634e487b7160e01b600052602260045260246000fd5b50919050565b600082601f83011261244c57600080fd5b815161245781611fc5565b6040516124648282611f76565b82815285602084870101111561247957600080fd5b611251836020830160208801611d90565b60006020828403121561249c57600080fd5b81516001600160401b038111156124b257600080fd5b611e078482850161243b565b600080858511156124ce57600080fd5b838611156124db57600080fd5b5050820193919092039150565b8035602083101561085857600019602084900360031b1b1692915050565b8082018082111561085857610858612363565b6001600160a01b0386811682528516602082015260806040820181905281018390526000838560a0840137600060a0858401015260a0601f19601f86011683010190508260608301529695505050505050565b60006020828403121561257e57600080fd5b81516001600160401b038082111561259557600080fd5b90830190604082860312156125a957600080fd5b6040516040810181811083821117156125c4576125c4611f3b565b604052825180151581146125d757600080fd5b81526020830151828111156125eb57600080fd5b6125f78782860161243b565b60208301525095945050505050565b600060033d111561261f5760046000803e5060005160e01c5b90565b600060443d10156126305790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561265f57505050505090565b82850191508151818111156126775750505050505090565b843d87010160208285010111156126915750505050505090565b6126a060208286010187611f76565b509095945050505050565b8181038181111561085857610858612363565b634e487b7160e01b600052603160045260246000fd5b6bffffffffffffffffffffffff1981358181169160148510156127015780818660140360031b1b83161692505b50509291505056fe46756e6374696f6e417574686f72697a6174696f6e3a206e617469766520746f6b656e207472616e73666572206e6f7420616c6c6f77656446756e6374696f6e417574686f72697a6174696f6e3a20696e76616c69642074784461746146756e6374696f6e417574686f72697a6174696f6e3a206e6f7420616c6c6f7765642066756e6374696f6e536f6c765661756c74477561726469616e5f4552433230417070726f7665417574686f72697a6174696f6ea264697066735822122034546470628a978de7c4670431904310ca52d628fa920e40edc38b7029c2f41c64736f6c63430008110033696e637265617365416c6c6f77616e636528616464726573732c75696e74323536296465637265617365416c6c6f77616e636528616464726573732c75696e7432353629",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "multicall(bytes[])": {
        "details": "Receives and executes a batch of function calls on this contract."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7011,
        "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
        "label": "governor",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7014,
        "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
        "label": "governanceAllowed",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4919,
        "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
        "label": "caller",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5050,
        "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
        "label": "_contracts",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(AddressSet)325_storage"
      },
      {
        "astId": 5055,
        "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
        "label": "_allowedContractToFunctions",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)204_storage)"
      },
      {
        "astId": 5059,
        "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
        "label": "_contractACL",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 982,
        "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
        "label": "safeAccount",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 985,
        "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
        "label": "_approveFuncs",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 988,
        "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
        "label": "_tokenSet",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(AddressSet)325_storage"
      },
      {
        "astId": 993,
        "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
        "label": "_allowedTokenSpenders",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_struct(AddressSet)325_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(AddressSet)325_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)325_storage"
      },
      "t_mapping(t_address,t_struct(Bytes32Set)204_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)204_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)325_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 324,
            "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)10_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32Set)204_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 203,
            "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)10_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)10_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5,
            "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 9,
            "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}