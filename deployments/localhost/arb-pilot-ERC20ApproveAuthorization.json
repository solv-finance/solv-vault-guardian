{
  "address": "0x66AfBE7f663f27D47BebD191380FC29c58D595dE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "safeMultiSendContract_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "caller_",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "spenders",
              "type": "address[]"
            }
          ],
          "internalType": "struct ERC20ApproveAuthorization.TokenSpenders[]",
          "name": "tokenSpenders_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "func_",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        }
      ],
      "name": "AddContractFunc",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "funcSig_",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        }
      ],
      "name": "AddContractFuncSig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "NewGovernor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "func_",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        }
      ],
      "name": "RemoveContractFunc",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "funcSig_",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        }
      ],
      "name": "RemoveContractFuncSig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "acl_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        }
      ],
      "name": "SetContractACL",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "TokenSpenderAdded",
      "type": "event"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SAFE_MULITSEND_FUNC_MULTI_SEND",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "acl_",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "funcList_",
          "type": "string[]"
        }
      ],
      "name": "addContractFuncs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "acl_",
          "type": "address"
        },
        {
          "internalType": "bytes4[]",
          "name": "funcSigList_",
          "type": "bytes4[]"
        }
      ],
      "name": "addContractFuncsSig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "spenders",
              "type": "address[]"
            }
          ],
          "internalType": "struct ERC20ApproveAuthorization.TokenSpenders[]",
          "name": "tokenSpendersList_",
          "type": "tuple[]"
        }
      ],
      "name": "addTokenSpenders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Type.TxData",
          "name": "txData_",
          "type": "tuple"
        }
      ],
      "name": "authorizationCheckTransaction",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "message",
              "type": "string"
            }
          ],
          "internalType": "struct Type.CheckResult",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "caller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forbidGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        }
      ],
      "name": "getACLByContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllContracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        }
      ],
      "name": "getFunctionsByContract",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTokenSpenders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governanceAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "funcList_",
          "type": "string[]"
        }
      ],
      "name": "removeContractFuncs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "internalType": "bytes4[]",
          "name": "funcSigList_",
          "type": "bytes4[]"
        }
      ],
      "name": "removeContractFuncsSig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "spenders",
              "type": "address[]"
            }
          ],
          "internalType": "struct ERC20ApproveAuthorization.TokenSpenders[]",
          "name": "tokenSpendersList_",
          "type": "tuple[]"
        }
      ],
      "name": "removeTokenSpenders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeMultiSendContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "acl_",
          "type": "address"
        }
      ],
      "name": "setContractACL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGovernor_",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x613573e37ed76b00fdb3251ee2672124026d0afb8bf8cec33db677e3e637a062",
  "receipt": {
    "to": null,
    "from": "0xd1B4ea4A0e176292D667695FC7674F845009b32E",
    "contractAddress": "0x66AfBE7f663f27D47BebD191380FC29c58D595dE",
    "transactionIndex": 0,
    "gasUsed": "2884877",
    "logsBloom": "0x
    "blockHash": "0x9d5cd1702879f34e88906d78fdd8788e4bea2aa50728ece24cf6c3095f25c23d",
    "transactionHash": "0x613573e37ed76b00fdb3251ee2672124026d0afb8bf8cec33db677e3e637a062",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 170948677,
        "transactionHash": "0x613573e37ed76b00fdb3251ee2672124026d0afb8bf8cec33db677e3e637a062",
        "address": "0x66AfBE7f663f27D47BebD191380FC29c58D595dE",
        "topics": [
          "0x1ba669d4a78521f2ad26e8e0fcbcdd626a63f34d68f326bc232a3abe2a5d042a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d1b4ea4a0e176292d667695fc7674f845009b32e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9d5cd1702879f34e88906d78fdd8788e4bea2aa50728ece24cf6c3095f25c23d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 170948677,
        "transactionHash": "0x613573e37ed76b00fdb3251ee2672124026d0afb8bf8cec33db677e3e637a062",
        "address": "0x66AfBE7f663f27D47BebD191380FC29c58D595dE",
        "topics": [
          "0x5c55717c3268b2c739eb5087e22a9bcf39b0d4f5a8ab89b4fff9cfe5711e4b34",
          "0x000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9",
          "0x000000000000000000000000d1b4ea4a0e176292d667695fc7674f845009b32e"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000018617070726f766528616464726573732c75696e74323536290000000000000000",
        "logIndex": 1,
        "blockHash": "0x9d5cd1702879f34e88906d78fdd8788e4bea2aa50728ece24cf6c3095f25c23d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 170948677,
        "transactionHash": "0x613573e37ed76b00fdb3251ee2672124026d0afb8bf8cec33db677e3e637a062",
        "address": "0x66AfBE7f663f27D47BebD191380FC29c58D595dE",
        "topics": [
          "0x246b022c673a2751245f84dced77afcce61bcd820ff1235276e8c1c242a78f74",
          "0x000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9",
          "0x095ea7b300000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d1b4ea4a0e176292d667695fc7674f845009b32e"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x9d5cd1702879f34e88906d78fdd8788e4bea2aa50728ece24cf6c3095f25c23d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 170948677,
        "transactionHash": "0x613573e37ed76b00fdb3251ee2672124026d0afb8bf8cec33db677e3e637a062",
        "address": "0x66AfBE7f663f27D47BebD191380FC29c58D595dE",
        "topics": [
          "0x5c55717c3268b2c739eb5087e22a9bcf39b0d4f5a8ab89b4fff9cfe5711e4b34",
          "0x000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9",
          "0x000000000000000000000000d1b4ea4a0e176292d667695fc7674f845009b32e"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000022696e637265617365416c6c6f77616e636528616464726573732c75696e7432353629000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 3,
        "blockHash": "0x9d5cd1702879f34e88906d78fdd8788e4bea2aa50728ece24cf6c3095f25c23d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 170948677,
        "transactionHash": "0x613573e37ed76b00fdb3251ee2672124026d0afb8bf8cec33db677e3e637a062",
        "address": "0x66AfBE7f663f27D47BebD191380FC29c58D595dE",
        "topics": [
          "0x246b022c673a2751245f84dced77afcce61bcd820ff1235276e8c1c242a78f74",
          "0x000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9",
          "0x3950935100000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d1b4ea4a0e176292d667695fc7674f845009b32e"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x9d5cd1702879f34e88906d78fdd8788e4bea2aa50728ece24cf6c3095f25c23d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 170948677,
        "transactionHash": "0x613573e37ed76b00fdb3251ee2672124026d0afb8bf8cec33db677e3e637a062",
        "address": "0x66AfBE7f663f27D47BebD191380FC29c58D595dE",
        "topics": [
          "0x5c55717c3268b2c739eb5087e22a9bcf39b0d4f5a8ab89b4fff9cfe5711e4b34",
          "0x000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9",
          "0x000000000000000000000000d1b4ea4a0e176292d667695fc7674f845009b32e"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000226465637265617365416c6c6f77616e636528616464726573732c75696e7432353629000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 5,
        "blockHash": "0x9d5cd1702879f34e88906d78fdd8788e4bea2aa50728ece24cf6c3095f25c23d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 170948677,
        "transactionHash": "0x613573e37ed76b00fdb3251ee2672124026d0afb8bf8cec33db677e3e637a062",
        "address": "0x66AfBE7f663f27D47BebD191380FC29c58D595dE",
        "topics": [
          "0x246b022c673a2751245f84dced77afcce61bcd820ff1235276e8c1c242a78f74",
          "0x000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9",
          "0xa457c2d700000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d1b4ea4a0e176292d667695fc7674f845009b32e"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x9d5cd1702879f34e88906d78fdd8788e4bea2aa50728ece24cf6c3095f25c23d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 170948677,
        "transactionHash": "0x613573e37ed76b00fdb3251ee2672124026d0afb8bf8cec33db677e3e637a062",
        "address": "0x66AfBE7f663f27D47BebD191380FC29c58D595dE",
        "topics": [
          "0x784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a4",
          "0x000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x9d5cd1702879f34e88906d78fdd8788e4bea2aa50728ece24cf6c3095f25c23d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 170948677,
        "transactionHash": "0x613573e37ed76b00fdb3251ee2672124026d0afb8bf8cec33db677e3e637a062",
        "address": "0x66AfBE7f663f27D47BebD191380FC29c58D595dE",
        "topics": [
          "0xf9379a04548d43557a3776d3a8d84c311dc0f769747526985c7b020600e6f156",
          "0x000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9",
          "0x00000000000000000000000022799daa45209338b7f938edf251bdfd1e6dcb32"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x9d5cd1702879f34e88906d78fdd8788e4bea2aa50728ece24cf6c3095f25c23d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 170948677,
        "transactionHash": "0x613573e37ed76b00fdb3251ee2672124026d0afb8bf8cec33db677e3e637a062",
        "address": "0x66AfBE7f663f27D47BebD191380FC29c58D595dE",
        "topics": [
          "0xf9379a04548d43557a3776d3a8d84c311dc0f769747526985c7b020600e6f156",
          "0x000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9",
          "0x000000000000000000000000e9bd233b2b34934fb83955ec15c2ac48f31a0e8c"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x9d5cd1702879f34e88906d78fdd8788e4bea2aa50728ece24cf6c3095f25c23d"
      }
    ],
    "blockNumber": 170948677,
    "cumulativeGasUsed": "2884877",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761",
    "0x074898bF8b0ce74B09960bb4E82EF0bFD4BaB875",
    [
      [
        "0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9",
        [
          "0x22799DAA45209338B7f938edf251bdfD1E6dCB32",
          "0xe9bD233b2b34934Fb83955EC15c2ac48F31A0E8c"
        ]
      ]
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "17008dbbee8cd6ecacadd393fda9ace3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeMultiSendContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"spenders\",\"type\":\"address[]\"}],\"internalType\":\"struct ERC20ApproveAuthorization.TokenSpenders[]\",\"name\":\"tokenSpenders_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"func_\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"}],\"name\":\"AddContractFunc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"funcSig_\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"}],\"name\":\"AddContractFuncSig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"NewGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"func_\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"}],\"name\":\"RemoveContractFunc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"funcSig_\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"}],\"name\":\"RemoveContractFuncSig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acl_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"}],\"name\":\"SetContractACL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"TokenSpenderAdded\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAFE_MULITSEND_FUNC_MULTI_SEND\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"acl_\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"funcList_\",\"type\":\"string[]\"}],\"name\":\"addContractFuncs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"acl_\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"funcSigList_\",\"type\":\"bytes4[]\"}],\"name\":\"addContractFuncsSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"spenders\",\"type\":\"address[]\"}],\"internalType\":\"struct ERC20ApproveAuthorization.TokenSpenders[]\",\"name\":\"tokenSpendersList_\",\"type\":\"tuple[]\"}],\"name\":\"addTokenSpenders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Type.TxData\",\"name\":\"txData_\",\"type\":\"tuple\"}],\"name\":\"authorizationCheckTransaction\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"internalType\":\"struct Type.CheckResult\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"caller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forbidGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"name\":\"getACLByContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"name\":\"getFunctionsByContract\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenSpenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"funcList_\",\"type\":\"string[]\"}],\"name\":\"removeContractFuncs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"funcSigList_\",\"type\":\"bytes4[]\"}],\"name\":\"removeContractFuncsSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"spenders\",\"type\":\"address[]\"}],\"internalType\":\"struct ERC20ApproveAuthorization.TokenSpenders[]\",\"name\":\"tokenSpendersList_\",\"type\":\"tuple[]\"}],\"name\":\"removeTokenSpenders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeMultiSendContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"acl_\",\"type\":\"address\"}],\"name\":\"setContractACL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernor_\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/authorizations/ERC20ApproveAuthorization.sol\":\"ERC20ApproveAuthorization\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031373035343732333531333436\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"src/authorizations/ERC20ApproveAuthorization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {EnumerableSet} from \\\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {Type} from \\\"../common/Type.sol\\\";\\nimport {FunctionAuthorization} from \\\"../common/FunctionAuthorization.sol\\\";\\nimport {Governable} from \\\"../utils/Governable.sol\\\";\\n\\ncontract ERC20ApproveAuthorization is FunctionAuthorization {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    string public constant NAME = \\\"SolvVaultGuard_ERC20ApproveAuthorization\\\";\\n    int256 public constant VERSION = 1;\\n\\n    string internal constant ERC20_APPROVE_FUNC = \\\"approve(address,uint256)\\\";\\n    string internal constant ERC20_INCREASE_ALLOWANCE_FUNC = \\\"increaseAllowance(address,uint256)\\\";\\n    string internal constant ERC20_DECREASE_ALLOWANCE_FUNC = \\\"decreaseAllowance(address,uint256)\\\";\\n    \\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    event TokenAdded(address indexed token);\\n    event TokenRemoved(address indexed token);\\n    event TokenSpenderAdded(address indexed token, address indexed spender);\\n\\n    address public safeAccount;\\n    string[] internal _approveFuncs;\\n\\n    EnumerableSet.AddressSet internal _tokenSet;\\n    mapping(address => EnumerableSet.AddressSet) internal _allowedTokenSpenders;\\n\\n    struct TokenSpenders {\\n        address token;\\n        address[] spenders;\\n    }\\n\\n    constructor(address safeMultiSendContract_, address caller_, TokenSpenders[] memory tokenSpenders_)\\n        FunctionAuthorization(safeMultiSendContract_, caller_, Governable(caller_).governor())\\n    {\\n        _approveFuncs = new string[](3);\\n        _approveFuncs[0] = ERC20_APPROVE_FUNC;\\n        _approveFuncs[1] = ERC20_INCREASE_ALLOWANCE_FUNC;\\n        _approveFuncs[2] = ERC20_DECREASE_ALLOWANCE_FUNC;\\n        _addTokenSpenders(tokenSpenders_);\\n    }\\n\\n    function addTokenSpenders(TokenSpenders[] calldata tokenSpendersList_) external virtual onlyGovernor {\\n        _addTokenSpenders(tokenSpendersList_);\\n    }\\n\\n    function removeTokenSpenders(TokenSpenders[] calldata tokenSpendersList_) external virtual onlyGovernor {\\n        _removeTokenSpenders(tokenSpendersList_);\\n    }\\n\\n    function _addTokenSpenders(TokenSpenders[] memory _tokenSpendersList) internal virtual {\\n        for (uint256 i = 0; i < _tokenSpendersList.length; i++) {\\n            _addTokenSpenders(_tokenSpendersList[i]);\\n        }\\n    }\\n\\n    function _removeTokenSpenders(TokenSpenders[] memory _tokenSpendersList) internal virtual {\\n        for (uint256 i = 0; i < _tokenSpendersList.length; i++) {\\n            _removeTokenSpenders(_tokenSpendersList[i]);\\n        }\\n    }\\n\\n    function _addTokenSpenders(TokenSpenders memory _tokenSpenders) internal virtual {\\n        address token = _tokenSpenders.token;\\n        address[] memory spenders = _tokenSpenders.spenders;\\n        if (_tokenSet.add(token)) {\\n            _addContractFuncs(token, _approveFuncs);\\n            emit TokenAdded(token);\\n        }\\n        for (uint256 i = 0; i < spenders.length; i++) {\\n            if (_allowedTokenSpenders[token].add(spenders[i])) {\\n                emit TokenSpenderAdded(token, spenders[i]);\\n            }\\n        }\\n    }\\n\\n    function _removeTokenSpenders(TokenSpenders memory _tokenSpenders) internal virtual {\\n        address token = _tokenSpenders.token;\\n        address[] memory spenders = _tokenSpenders.spenders;\\n        for (uint256 i = 0; i < spenders.length; i++) {\\n            if (_allowedTokenSpenders[token].remove(spenders[i])) {\\n                emit TokenSpenderAdded(token, spenders[i]);\\n            }\\n        }\\n        if (_allowedTokenSpenders[token].length() == 0) {\\n            if (_tokenSet.remove(token)) {\\n                _removeContractFuncs(token, _approveFuncs);\\n                emit TokenRemoved(token);\\n            }\\n        }\\n    }\\n\\n    function getAllTokens() external view returns (address[] memory) {\\n        return _tokenSet.values();\\n    }\\n\\n    function getTokenSpenders(address token) external view returns (address[] memory) {\\n        return _allowedTokenSpenders[token].values();\\n    }\\n\\n}\\n\",\"keccak256\":\"0xef95ebc9627c000f6c432788131572fe105bc024311192ff7631f220fdae515f\",\"license\":\"MIT\"},\"src/common/BaseACL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Type} from \\\"./Type.sol\\\";\\n\\nabstract contract BaseACL {\\n    address public caller;\\n    address public safeAccount;\\n    address public solvGuard;\\n\\n    constructor(address caller_) {\\n        caller = caller_;\\n    }\\n\\n    modifier onlyCaller() virtual {\\n        require(msg.sender == caller, \\\"onlyCaller\\\");\\n        _;\\n    }\\n\\n    function preCheck(address from_, address to_, bytes calldata data_, uint256 value_)\\n        external\\n        virtual\\n        onlyCaller\\n        returns (Type.CheckResult memory result_)\\n    {\\n        result_ = _preCheck(from_, to_, data_, value_);\\n    }\\n\\n    function _preCheck(address from_, address to_, bytes calldata data_, uint256 value_)\\n        internal\\n        virtual\\n        returns (Type.CheckResult memory result_)\\n    {\\n        (bool success, bytes memory revertData) =\\n            address(this).staticcall(_packTxn(Type.TxData(from_, to_, value_, data_)));\\n        result_ = _parseReturnData(success, revertData);\\n    }\\n\\n    function _parseReturnData(bool success, bytes memory revertData)\\n        internal\\n        pure\\n        returns (Type.CheckResult memory result_)\\n    {\\n        if (success) {\\n            // ACL checking functions should not return any bytes which differs from normal view functions.\\n            require(revertData.length == 0, \\\"ACL Function return non empty\\\");\\n            result_.success = true;\\n        } else {\\n            if (revertData.length < 68) {\\n                // 8(bool) + 32(length)\\n                result_.message = string(revertData);\\n            } else {\\n                assembly {\\n                    // Slice the sighash.\\n                    revertData := add(revertData, 0x04)\\n                }\\n                result_.message = abi.decode(revertData, (string));\\n            }\\n        }\\n    }\\n\\n    function _packTxn(Type.TxData memory txData_) internal pure virtual returns (bytes memory) {\\n        bytes memory txnData = abi.encode(txData_);\\n        bytes memory callDataSize = abi.encode(txData_.data.length);\\n        return abi.encodePacked(txData_.data, txnData, callDataSize);\\n    }\\n\\n    function _unpackTxn() internal view virtual returns (Type.TxData memory txData_) {\\n        uint256 end = msg.data.length;\\n        uint256 callDataSize = abi.decode(msg.data[end - 32:end], (uint256));\\n        txData_ = abi.decode(msg.data[callDataSize:], (Type.TxData));\\n    }\\n\\n    function _txn() internal view virtual returns (Type.TxData memory) {\\n        return _unpackTxn();\\n    }\\n}\\n\",\"keccak256\":\"0xde3ba8c7e42f1d17aa3d9d329baf9c26f6b6c8b59ed675da6e12291f88ee2d44\",\"license\":\"MIT\"},\"src/common/BaseAuthorization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Type} from \\\"./Type.sol\\\";\\nimport {Governable} from \\\"../utils/Governable.sol\\\";\\n\\nabstract contract BaseAuthorization is Governable {\\n    address public caller;\\n\\n    modifier onlyCaller() {\\n        if (msg.sender != caller) {\\n            revert(\\\"BaseAuthorization: onlySelf\\\");\\n        }\\n        _;\\n    }\\n\\n    constructor(address caller_, address governor_) Governable(governor_) {\\n        caller = caller_;\\n    }\\n\\n    fallback() external {\\n        // We don't revert on fallback to avoid issues in case of a Safe upgrade\\n        // E.g. The expected check method might change and then the Safe would be locked.\\n    }\\n\\n    function authorizationCheckTransaction(Type.TxData calldata txData_)\\n        external\\n        virtual\\n        onlyCaller\\n        returns (Type.CheckResult memory)\\n    {\\n        return _authorizationCheckTransaction(txData_);\\n    }\\n\\n    function _authorizationCheckTransaction(Type.TxData calldata txData_)\\n        internal\\n        virtual\\n        returns (Type.CheckResult memory);\\n}\\n\",\"keccak256\":\"0xf4c085d14add495be7974b6f043b3adf6b0165bf1051fd0ad133681b7f8c0b44\",\"license\":\"MIT\"},\"src/common/FunctionAuthorization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {EnumerableSet} from \\\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {Type} from \\\"../common/Type.sol\\\";\\nimport {BaseAuthorization} from \\\"../common/BaseAuthorization.sol\\\";\\nimport {BaseACL} from \\\"../common/BaseACL.sol\\\";\\nimport {Multicall} from \\\"../utils/Multicall.sol\\\";\\n\\nabstract contract FunctionAuthorization is BaseAuthorization, Multicall {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    string public constant SAFE_MULITSEND_FUNC_MULTI_SEND = \\\"multiSend(bytes)\\\";\\n\\n    event AddContractFunc(address indexed contract_, string func_, address indexed sender_);\\n    event AddContractFuncSig(address indexed contract_, bytes4 indexed funcSig_, address indexed sender_);\\n    event RemoveContractFunc(address indexed contract_, string func_, address indexed sender_);\\n    event RemoveContractFuncSig(address indexed contract_, bytes4 indexed funcSig_, address indexed sender_);\\n    event SetContractACL(address indexed contract_, address indexed acl_, address indexed sender_);\\n\\n    address public immutable safeMultiSendContract;\\n    EnumerableSet.AddressSet internal _contracts;\\n    mapping(address => EnumerableSet.Bytes32Set) internal _allowedContractToFunctions;\\n    //contract => acl\\n    mapping(address => address) internal _contractACL;\\n\\n    constructor(address safeMultiSendContract_, address caller_, address governor_)\\n        BaseAuthorization(caller_, governor_)\\n    {\\n        safeMultiSendContract = safeMultiSendContract_;\\n    }\\n\\n    function addContractFuncs(address contract_, address acl_, string[] memory funcList_)\\n        external\\n        virtual\\n        onlyGovernor\\n    {\\n        _addContractFuncs(contract_, funcList_);\\n        if (acl_ != address(0)) {\\n            _setContractACL(contract_, acl_);\\n        }\\n    }\\n\\n    function removeContractFuncs(address contract_, string[] calldata funcList_) external virtual onlyGovernor {\\n        _removeContractFuncs(contract_, funcList_);\\n    }\\n\\n    function addContractFuncsSig(address contract_, address acl_, bytes4[] calldata funcSigList_)\\n        external\\n        virtual\\n        onlyGovernor\\n    {\\n        _addContractFuncsSig(contract_, funcSigList_);\\n        if (acl_ != address(0)) {\\n            _setContractACL(contract_, acl_);\\n        }\\n    }\\n\\n    function removeContractFuncsSig(address contract_, bytes4[] calldata funcSigList_) external virtual onlyGovernor {\\n        _removeContractFuncsSig(contract_, funcSigList_);\\n    }\\n\\n    function setContractACL(address contract_, address acl_) external virtual onlyGovernor {\\n        _setContractACL(contract_, acl_);\\n    }\\n\\n    function getAllContracts() public view virtual returns (address[] memory) {\\n        return _contracts.values();\\n    }\\n\\n    function getFunctionsByContract(address contract_) public view virtual returns (bytes32[] memory) {\\n        return _allowedContractToFunctions[contract_].values();\\n    }\\n\\n    function getACLByContract(address contract_) external view virtual returns (address) {\\n        return _contractACL[contract_];\\n    }\\n\\n    function _addContractFuncs(address contract_, string[] memory funcList_) internal virtual {\\n        require(funcList_.length > 0, \\\"FunctionAuthorization: empty funcList\\\");\\n\\n        for (uint256 index = 0; index < funcList_.length; index++) {\\n            bytes4 funcSelector = bytes4(keccak256(bytes(funcList_[index])));\\n            bytes32 funcSelector32 = bytes32(funcSelector);\\n            if (_allowedContractToFunctions[contract_].add(funcSelector32)) {\\n                emit AddContractFunc(contract_, funcList_[index], msg.sender);\\n                emit AddContractFuncSig(contract_, funcSelector, msg.sender);\\n            }\\n        }\\n\\n        _contracts.add(contract_);\\n    }\\n\\n    function _addContractFuncsSig(address contract_, bytes4[] memory funcSigList_) internal virtual {\\n        require(funcSigList_.length > 0, \\\"FunctionAuthorization: empty funcList\\\");\\n\\n        for (uint256 index = 0; index < funcSigList_.length; index++) {\\n            bytes32 funcSelector32 = bytes32(funcSigList_[index]);\\n            if (_allowedContractToFunctions[contract_].add(funcSelector32)) {\\n                emit AddContractFuncSig(contract_, funcSigList_[index], msg.sender);\\n            }\\n        }\\n\\n        _contracts.add(contract_);\\n    }\\n\\n    function _removeContractFuncs(address contract_, string[] memory funcList_) internal virtual {\\n        require(funcList_.length > 0, \\\"FunctionAuthorization: empty funcList\\\");\\n\\n        for (uint256 index = 0; index < funcList_.length; index++) {\\n            bytes4 funcSelector = bytes4(keccak256(bytes(funcList_[index])));\\n            bytes32 funcSelector32 = bytes32(funcSelector);\\n            if (_allowedContractToFunctions[contract_].remove(funcSelector32)) {\\n                emit RemoveContractFunc(contract_, funcList_[index], msg.sender);\\n                emit RemoveContractFuncSig(contract_, funcSelector, msg.sender);\\n            }\\n        }\\n\\n        if (_allowedContractToFunctions[contract_].length() == 0) {\\n            delete _contractACL[contract_];\\n            _contracts.remove(contract_);\\n        }\\n    }\\n\\n    function _removeContractFuncsSig(address contract_, bytes4[] calldata funcSigList_) internal virtual {\\n        require(funcSigList_.length > 0, \\\"FunctionAuthorization: empty funcList\\\");\\n\\n        for (uint256 index = 0; index < funcSigList_.length; index++) {\\n            bytes32 funcSelector32 = bytes32(funcSigList_[index]);\\n            if (_allowedContractToFunctions[contract_].remove(funcSelector32)) {\\n                emit RemoveContractFuncSig(contract_, funcSigList_[index], msg.sender);\\n            }\\n        }\\n\\n        if (_allowedContractToFunctions[contract_].length() == 0) {\\n            delete _contractACL[contract_];\\n            _contracts.remove(contract_);\\n        }\\n    }\\n\\n    function _setContractACL(address contract_, address acl_) internal virtual {\\n        _contractACL[contract_] = acl_;\\n        emit SetContractACL(contract_, acl_, msg.sender);\\n    }\\n\\n    function _authorizationCheckTransaction(Type.TxData calldata txData_)\\n        internal\\n        virtual\\n        override\\n        returns (Type.CheckResult memory result)\\n    {\\n        return _authorizationCheckTransactionWithRecursion(txData_.from, txData_.to, txData_.data, txData_.value);\\n    }\\n\\n    function _authorizationCheckTransactionWithRecursion(\\n        address from_,\\n        address to_,\\n        bytes calldata data_,\\n        uint256 value_\\n    ) internal virtual returns (Type.CheckResult memory result_) {\\n        if (data_.length == 0) {\\n            return _checkNativeTransfer(to_, value_);\\n        }\\n\\n        if (data_.length < 4) {\\n            result_.success = false;\\n            result_.message = \\\"FunctionAuthorization: invalid txData\\\";\\n            return result_;\\n        }\\n\\n        bytes4 selector = _getSelector(data_);\\n\\n        if (to_ == safeMultiSendContract && selector == bytes4(keccak256(bytes(SAFE_MULITSEND_FUNC_MULTI_SEND)))) {\\n            result_ = _checkMultiSend(from_, to_, data_, value_);\\n        } else {\\n            if (_isAllowedSelector(to_, selector)) {\\n                result_.success = true;\\n                //if allowed, check acl\\n                if (_contractACL[to_] != address(0)) {\\n                    result_ = BaseACL(_contractACL[to_]).preCheck(from_, to_, data_, value_);\\n                }\\n\\n                return result_;\\n            }\\n            result_.success = false;\\n            result_.message = \\\"FunctionAuthorization: not allowed function\\\";\\n        }\\n    }\\n\\n    function _checkMultiSend(address from_, address, /* to_ */ bytes calldata transactions_, uint256 /* value_ */ )\\n        internal\\n        virtual\\n        returns (Type.CheckResult memory result_)\\n    {\\n        uint256 multiSendDataLength = uint256(bytes32(transactions_[4 + 32:4 + 32 + 32]));\\n        bytes calldata multiSendData = transactions_[4 + 32 + 32:4 + 32 + 32 + multiSendDataLength];\\n        uint256 startIndex = 0;\\n        while (startIndex < multiSendData.length) {\\n            (address to, uint256 value, bytes calldata data, uint256 endIndex) =\\n                _unpackMultiSend(multiSendData, startIndex);\\n            if (to != address(0)) {\\n                result_ = _authorizationCheckTransactionWithRecursion(from_, to, data, value);\\n                if (!result_.success) {\\n                    return result_;\\n                }\\n            }\\n\\n            startIndex = endIndex;\\n        }\\n\\n        result_.success = true;\\n    }\\n\\n    function _unpackMultiSend(bytes calldata transactions_, uint256 startIndex_)\\n        internal\\n        pure\\n        virtual\\n        returns (address to_, uint256 value_, bytes calldata data_, uint256 endIndex_)\\n    {\\n        uint256 offset = 0;\\n        uint256 length = 1;\\n        offset += length;\\n\\n        //address 20 bytes\\n        length = 20;\\n        to_ = address(bytes20(transactions_[startIndex_ + offset:startIndex_ + offset + length]));\\n        offset += length;\\n\\n        //value 32 bytes\\n        length = 32;\\n        value_ = uint256(bytes32(transactions_[startIndex_ + offset:startIndex_ + offset + length]));\\n        offset += length;\\n\\n        //datalength 32 bytes\\n        length = 32;\\n        uint256 dataLength = uint256(bytes32(transactions_[startIndex_ + offset:startIndex_ + offset + length]));\\n        offset += length;\\n\\n        //data\\n        data_ = transactions_[startIndex_ + offset:startIndex_ + offset + dataLength];\\n\\n        endIndex_ = startIndex_ + offset + dataLength;\\n    }\\n\\n    function _isAllowedSelector(address target_, bytes4 selector_) internal view virtual returns (bool) {\\n        return _allowedContractToFunctions[target_].contains(selector_);\\n    }\\n\\n    function _getSelector(bytes calldata data_) internal pure virtual returns (bytes4 selector_) {\\n        assembly {\\n            selector_ := calldataload(data_.offset)\\n        }\\n    }\\n\\n    // to allow native token transferring, must override this function\\n    function _checkNativeTransfer(address, /* to */ uint256 /* value_ */ )\\n        internal\\n        view\\n        virtual\\n        returns (Type.CheckResult memory result_)\\n    {\\n        result_.success = false;\\n        result_.message = \\\"FunctionAuthorization: native token transfer not allowed\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x8749db89cf6a4450b4b98bbe57352642179458763576b5076785813cf30ac1c8\",\"license\":\"MIT\"},\"src/common/Type.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Type {\\n\\tstruct TxData {\\n\\t\\taddress from; //msg.sender\\n\\t\\taddress to;\\n\\t\\tuint256 value;\\n\\t\\tbytes data; //calldata\\n\\t}\\n\\n\\tstruct CheckResult {\\n\\t\\tbool success;\\n\\t\\tstring message;\\n\\t}\\n}\",\"keccak256\":\"0x0cb883087ccdd40779544fb3e4adcd9951ee8d9be2e8c2836fc1f174f8cecf0b\",\"license\":\"MIT\"},\"src/utils/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract Governable {\\n    event NewGovernor(address indexed previousGovernor, address indexed newGovernor);\\n\\n    address public governor;\\n    bool public governanceAllowed = true;\\n\\n    constructor(address governor_) {\\n        _transferGovernance(governor_);\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(governanceAllowed && governor == msg.sender, \\\"Governable: only governor\\\");\\n        _;\\n    }\\n\\n    function forbidGovernance() external onlyGovernor {\\n        governanceAllowed = false;\\n    }\\n\\n    function transferGovernance(address newGovernor_) public onlyGovernor {\\n        _transferGovernance(newGovernor_);\\n    }\\n\\n    function _transferGovernance(address newGovernor_) internal {\\n        require(newGovernor_ != address(0), \\\"Governable: new governor is the zero address\\\");\\n        address oldGovernor = governor;\\n        governor = newGovernor_;\\n        emit NewGovernor(oldGovernor, newGovernor_);\\n    }\\n}\\n\",\"keccak256\":\"0xdaeeec6201b98844074847f3161a535fccbeb87ceee6a39a58546297cb32e77c\",\"license\":\"MIT\"},\"src/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\nabstract contract Multicall {\\n\\t/**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n\\n        for (uint256 i; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n            if (!success) {\\n                _revertWithParsedMessage(result);\\n            }\\n\\n            results[i] = result;\\n        }\\n\\n        return results;\\n    }\\n\\n\\t  function _revertWithParsedMessage(bytes memory result) internal pure {\\n        (string memory revertMessage, bool hasRevertMessage) = _getRevertMessage(result);\\n\\n        if (hasRevertMessage) {\\n            revert(revertMessage);\\n        } else {\\n            _revertWithCustomError(result);\\n        }\\n    }\\n\\n    function _revertWithCustomError(bytes memory result) internal pure {\\n        // referenced from https://ethereum.stackexchange.com/a/123588\\n        uint256 length = result.length;\\n        assembly {\\n            revert(add(result, 0x20), length)\\n        }\\n    }\\n\\n\\t // To get the revert reason, referenced from https://ethereum.stackexchange.com/a/83577\\n    function _getRevertMessage(bytes memory result) internal pure returns (string memory, bool) {\\n        // If the result length is less than 68, then the transaction either panicked or failed silently\\n        if (result.length < 68) {\\n            return (\\\"\\\", false);\\n        }\\n\\n        bytes4 errorSelector = _getErrorSelectorFromData(result);\\n\\n        // 0x08c379a0 is the selector for Error(string)\\n        // referenced from https://blog.soliditylang.org/2021/04/21/custom-errors/\\n        if (errorSelector == bytes4(0x08c379a0)) {\\n            assembly {\\n                result := add(result, 0x04)\\n            }\\n\\n            return (abi.decode(result, (string)), true);\\n        }\\n\\n        // error may be a custom error, return an empty string for this case\\n        return (\\\"\\\", false);\\n    }\\n\\n\\n    function _getErrorSelectorFromData(bytes memory data) internal pure returns (bytes4) {\\n        bytes4 errorSelector;\\n\\n        assembly {\\n            errorSelector := mload(add(data, 0x20))\\n        }\\n\\n        return errorSelector;\\n    }\\n\\n}\",\"keccak256\":\"0x44b7fb18afdf38fd84b7a8e80172696a4bc0167a5d555dc4d4f3a91d7c021cca\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014f5760003560e01c806370c2ded5116100bd578063ac237ab011610079578063ac237ab014610331578063ac9650d814610344578063d38bfff414610364578063f486186d14610377578063fc9c8d391461037f578063ffa1ad741461039257005b806370c2ded5146102a457806373339381146102c457806394e9d044146102d7578063a2d96210146102ea578063a3f4df7e146102fd578063a3fb76a51461030557005b806336a6c8611161010c57806336a6c861146101e457806347263232146101f7578063476ed36d1461020a57806352797b3e1461021d5780635ce5fb0a14610244578063656abb9c1461026857005b80630c340a241461015157806314fda027146101815780631576f83f1461019457806318d3ce96146101a75780632a5c792a146101bc5780633504a49f146101c4575b005b600054610164906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61014f61018f366004611c00565b6103a8565b600654610164906001600160a01b031681565b6101af61044c565b6040516101789190611c60565b6101af61045d565b6101d76101d2366004611cad565b610469565b6040516101789190611d37565b61014f6101f2366004611d66565b6104e9565b61014f610205366004611d99565b610536565b61014f610218366004611dda565b610587565b6101647f000000000000000000000000000000000000000000000000000000000000000081565b60005461025890600160a01b900460ff1681565b6040519015158152602001610178565b6102976040518060400160405280601081526020016f6d756c746953656e642862797465732960801b81525081565b6040516101789190611e2c565b6102b76102b2366004611e3f565b6105de565b6040516101789190611e5a565b61014f6102d2366004611d99565b610602565b61014f6102e5366004611dda565b610653565b61014f6102f8366004611ffe565b61069d565b6102976106ff565b610164610313366004611e3f565b6001600160a01b039081166000908152600560205260409020541690565b6101af61033f366004611e3f565b61071b565b610357610352366004611d99565b61073f565b604051610178919061206f565b61014f610372366004611e3f565b61085e565b61014f6108a9565b600154610164906001600160a01b031681565b61039a600181565b604051908152602001610178565b600054600160a01b900460ff1680156103cb57506000546001600160a01b031633145b6103f05760405162461bcd60e51b81526004016103e7906120d1565b60405180910390fd5b61042d8483838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061091f92505050565b6001600160a01b03831615610446576104468484610a34565b50505050565b60606104586002610a8e565b905090565b60606104586008610a8e565b6040805180820190915260008152606060208201526001546001600160a01b031633146104d85760405162461bcd60e51b815260206004820152601b60248201527f42617365417574686f72697a6174696f6e3a206f6e6c7953656c66000000000060448201526064016103e7565b6104e182610a9b565b90505b919050565b600054600160a01b900460ff16801561050c57506000546001600160a01b031633145b6105285760405162461bcd60e51b81526004016103e7906120d1565b6105328282610a34565b5050565b600054600160a01b900460ff16801561055957506000546001600160a01b031633145b6105755760405162461bcd60e51b81526004016103e7906120d1565b6105326105828284612108565b610ae7565b600054600160a01b900460ff1680156105aa57506000546001600160a01b031633145b6105c65760405162461bcd60e51b81526004016103e7906120d1565b6105d9836105d4838561220e565b610b27565b505050565b6001600160a01b03811660009081526004602052604090206060906104e190610a8e565b600054600160a01b900460ff16801561062557506000546001600160a01b031633145b6106415760405162461bcd60e51b81526004016103e7906120d1565b61053261064e8284612108565b610cc7565b600054600160a01b900460ff16801561067657506000546001600160a01b031633145b6106925760405162461bcd60e51b81526004016103e7906120d1565b6105d9838383610d07565b600054600160a01b900460ff1680156106c057506000546001600160a01b031633145b6106dc5760405162461bcd60e51b81526004016103e7906120d1565b6106e68382610e64565b6001600160a01b038216156105d9576105d98383610a34565b6040518060600160405280602881526020016125f16028913981565b6001600160a01b0381166000908152600a602052604090206060906104e190610a8e565b6060816001600160401b0381111561075957610759611e92565b60405190808252806020026020018201604052801561078c57816020015b60608152602001906001900390816107775790505b50905060005b8281101561085657600080308686858181106107b0576107b061221b565b90506020028101906107c29190612231565b6040516107d0929190612277565b600060405180830381855af49150503d806000811461080b576040519150601f19603f3d011682016040523d82523d6000602084013e610810565b606091505b5091509150816108235761082381610faa565b808484815181106108365761083661221b565b60200260200101819052505050808061084e9061229d565b915050610792565b505b92915050565b600054600160a01b900460ff16801561088157506000546001600160a01b031633145b61089d5760405162461bcd60e51b81526004016103e7906120d1565b6108a681610fe3565b50565b600054600160a01b900460ff1680156108cc57506000546001600160a01b031633145b6108e85760405162461bcd60e51b81526004016103e7906120d1565b6000805460ff60a01b19169055565b600061090c836001600160a01b03841661109e565b9392505050565b600061090c838361109e565b60008151116109405760405162461bcd60e51b81526004016103e7906122b6565b60005b8151811015610a285760008282815181106109605761096061221b565b60200260200101516001600160e01b03191690506109ab8160046000876001600160a01b03166001600160a01b0316815260200190815260200160002061091390919063ffffffff16565b15610a1557336001600160a01b03168383815181106109cc576109cc61221b565b60200260200101516001600160e01b031916856001600160a01b03167f246b022c673a2751245f84dced77afcce61bcd820ff1235276e8c1c242a78f7460405160405180910390a45b5080610a208161229d565b915050610943565b506105d96002836108f7565b6001600160a01b0382811660008181526005602052604080822080546001600160a01b031916948616948517905551339392917f09a226cf85d5c3f9bf762d15f165b63b555418743ec5a33495c22ef0f9240bc591a45050565b6060600061090c836110ed565b6040805180820190915260008152606060208201526104e1610ac06020840184611e3f565b610ad06040850160208601611e3f565b610add6060860186612231565b8660400135611149565b60005b815181101561053257610b15828281518110610b0857610b0861221b565b6020026020010151611336565b80610b1f8161229d565b915050610aea565b6000815111610b485760405162461bcd60e51b81526004016103e7906122b6565b60005b8151811015610c6d576000828281518110610b6857610b6861221b565b6020908102919091018101518051908201206001600160a01b0386166000908152600490925260409091209091506001600160e01b0319821690610bac9082611557565b15610c5857336001600160a01b0316856001600160a01b03167ffed6cf2efef20378e90c3b71c30db7338ca98f5e50e3bf7c8467d8d062512ac2868681518110610bf857610bf861221b565b6020026020010151604051610c0d9190611e2c565b60405180910390a360405133906001600160e01b03198416906001600160a01b038816907fedfbd30ca95f1e16901a73aea7daddbbbcd26a1ff975301743208f1c3badfeb190600090a45b50508080610c659061229d565b915050610b4b565b506001600160a01b0382166000908152600460205260409020610c8f90611563565b600003610532576001600160a01b038216600090815260056020526040902080546001600160a01b03191690556105d960028361156d565b60005b815181101561053257610cf5828281518110610ce857610ce861221b565b6020026020010151611582565b80610cff8161229d565b915050610cca565b80610d245760405162461bcd60e51b81526004016103e7906122b6565b60005b81811015610e0a576000838383818110610d4357610d4361221b565b9050602002016020810190610d5891906122fb565b6001600160a01b03861660009081526004602052604090206001600160e01b0319919091169150610d899082611557565b15610df75733848484818110610da157610da161221b565b9050602002016020810190610db691906122fb565b6001600160e01b031916866001600160a01b03167fedfbd30ca95f1e16901a73aea7daddbbbcd26a1ff975301743208f1c3badfeb160405160405180910390a45b5080610e028161229d565b915050610d27565b506001600160a01b0383166000908152600460205260409020610e2c90611563565b6000036105d9576001600160a01b038316600090815260056020526040902080546001600160a01b031916905561044660028461156d565b6000815111610e855760405162461bcd60e51b81526004016103e7906122b6565b60005b8151811015610a28576000828281518110610ea557610ea561221b565b6020908102919091018101518051908201206001600160a01b0386166000908152600490925260409091209091506001600160e01b0319821690610ee99082610913565b15610f9557336001600160a01b0316856001600160a01b03167f5c55717c3268b2c739eb5087e22a9bcf39b0d4f5a8ab89b4fff9cfe5711e4b34868681518110610f3557610f3561221b565b6020026020010151604051610f4a9190611e2c565b60405180910390a360405133906001600160e01b03198416906001600160a01b038816907f246b022c673a2751245f84dced77afcce61bcd820ff1235276e8c1c242a78f7490600090a45b50508080610fa29061229d565b915050610e88565b600080610fb683611776565b915091508015610fda578160405162461bcd60e51b81526004016103e79190611e2c565b6105d983611806565b6001600160a01b03811661104e5760405162461bcd60e51b815260206004820152602c60248201527f476f7665726e61626c653a206e657720676f7665726e6f72206973207468652060448201526b7a65726f206164647265737360a01b60648201526084016103e7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f1ba669d4a78521f2ad26e8e0fcbcdd626a63f34d68f326bc232a3abe2a5d042a9190a35050565b60008181526001830160205260408120546110e557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610858565b506000610858565b60608160000180548060200260200160405190810160405280929190818152602001828054801561113d57602002820191906000526020600020905b815481526020019060010190808311611129575b50505050509050919050565b604080518082019091526000815260606020820152600083900361117857611171858361180f565b905061132d565b60048310156111a75760008152604080516060810190915260258082526125a16020830139602082015261132d565b6000843590507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316866001600160a01b0316148015611226575060408051808201909152601081526f6d756c746953656e642862797465732960801b6020909101526001600160e01b031981166346c07f8560e11b145b1561123f57611238878787878761184b565b915061132b565b6112498682611916565b1561130957600182526001600160a01b038681166000908152600560205260409020541615611303576001600160a01b038087166000908152600560205260409081902054905163e558cba160e01b815291169063e558cba1906112b9908a908a908a908a908a90600401612325565b6000604051808303816000875af11580156112d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261130091908101906123bd565b91505b5061132d565b600082526040805160608101909152602b8082526125c6602083013960208301525b505b95945050505050565b8051602082015160005b815181101561140a5761139982828151811061135e5761135e61221b565b6020026020010151600a6000866001600160a01b03166001600160a01b0316815260200190815260200160002061156d90919063ffffffff16565b156113f8578181815181106113b0576113b061221b565b60200260200101516001600160a01b0316836001600160a01b03167ff9379a04548d43557a3776d3a8d84c311dc0f769747526985c7b020600e6f15660405160405180910390a35b806114028161229d565b915050611340565b506001600160a01b0382166000908152600a6020526040902061142c90611563565b6000036105d95761143e60088361156d565b156105d95761151e826007805480602002602001604051908101604052809291908181526020016000905b8282101561151557838290600052602060002001805461148890612441565b80601f01602080910402602001604051908101604052809291908181526020018280546114b490612441565b80156115015780601f106114d657610100808354040283529160200191611501565b820191906000526020600020905b8154815290600101906020018083116114e457829003601f168201915b505050505081526020019060010190611469565b50505050610b27565b6040516001600160a01b038316907f4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd390600090a2505050565b600061090c8383611942565b60006104e1825490565b600061090c836001600160a01b038416611942565b805160208201516115946008836108f7565b156116a957611674826007805480602002602001604051908101604052809291908181526020016000905b8282101561166b5783829060005260206000200180546115de90612441565b80601f016020809104026020016040519081016040528092919081815260200182805461160a90612441565b80156116575780601f1061162c57610100808354040283529160200191611657565b820191906000526020600020905b81548152906001019060200180831161163a57829003601f168201915b5050505050815260200190600101906115bf565b50505050610e64565b6040516001600160a01b038316907f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a490600090a25b60005b8151811015610446576117058282815181106116ca576116ca61221b565b6020026020010151600a6000866001600160a01b03166001600160a01b031681526020019081526020016000206108f790919063ffffffff16565b156117645781818151811061171c5761171c61221b565b60200260200101516001600160a01b0316836001600160a01b03167ff9379a04548d43557a3776d3a8d84c311dc0f769747526985c7b020600e6f15660405160405180910390a35b8061176e8161229d565b9150506116ac565b6060600060448351101561179d575050604080516020810190915260008082529092909150565b60006117aa846020015190565b90506307b9e43360e51b6001600160e01b03198216016117e957600484019350838060200190518101906117de919061247b565b946001945092505050565b600060405180602001604052806000815250909250925050915091565b80518060208301fd5b60408051808201909152600081526060602082015260008152604080516060810190915260388082526125696020830139602082015292915050565b60408051808201909152600081526060602082015260006118706044602486886124af565b611879916124d9565b90503660008660448761188c86836124f7565b92611899939291906124af565b9150915060005b8181101561190557600080366000806118ba888888611a35565b9398509196509450925090506001600160a01b038516156118f9576118e28f86858588611149565b8051909a506118f95750505050505050505061132d565b94506118a09350505050565b505060018352505095945050505050565b6001600160a01b038216600090815260046020526040812061090c906001600160e01b03198416611b86565b60008181526001830160205260408120548015611a2b57600061196660018361250a565b855490915060009061197a9060019061250a565b90508181146119df57600086600001828154811061199a5761199a61221b565b90600052602060002001549050808760000184815481106119bd576119bd61221b565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806119f0576119f061251d565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610858565b6000915050610858565b600080368180806001611a4881836124f7565b9150601490508989611a5a848b6124f7565b9083611a66868d6124f7565b611a7091906124f7565b92611a7d939291906124af565b611a8691612533565b60601c9650611a9581836124f7565b9150602090508989611aa7848b6124f7565b9083611ab3868d6124f7565b611abd91906124f7565b92611aca939291906124af565b611ad3916124d9565b9550611adf81836124f7565b91506020905060008a8a611af3858c6124f7565b9084611aff878e6124f7565b611b0991906124f7565b92611b16939291906124af565b611b1f916124d9565b9050611b2b82846124f7565b92508a8a611b39858c6124f7565b9083611b45878e6124f7565b611b4f91906124f7565b92611b5c939291906124af565b909650945080611b6c848b6124f7565b611b7691906124f7565b9350505050939792965093509350565b6000818152600183016020526040812054151561090c565b80356001600160a01b03811681146104e457600080fd5b60008083601f840112611bc757600080fd5b5081356001600160401b03811115611bde57600080fd5b6020830191508360208260051b8501011115611bf957600080fd5b9250929050565b60008060008060608587031215611c1657600080fd5b611c1f85611b9e565b9350611c2d60208601611b9e565b925060408501356001600160401b03811115611c4857600080fd5b611c5487828801611bb5565b95989497509550505050565b6020808252825182820181905260009190848201906040850190845b81811015611ca15783516001600160a01b031683529284019291840191600101611c7c565b50909695505050505050565b600060208284031215611cbf57600080fd5b81356001600160401b03811115611cd557600080fd5b82016080818503121561090c57600080fd5b60005b83811015611d02578181015183820152602001611cea565b50506000910152565b60008151808452611d23816020860160208601611ce7565b601f01601f19169290920160200192915050565b6020815281511515602082015260006020830151604080840152611d5e6060840182611d0b565b949350505050565b60008060408385031215611d7957600080fd5b611d8283611b9e565b9150611d9060208401611b9e565b90509250929050565b60008060208385031215611dac57600080fd5b82356001600160401b03811115611dc257600080fd5b611dce85828601611bb5565b90969095509350505050565b600080600060408486031215611def57600080fd5b611df884611b9e565b925060208401356001600160401b03811115611e1357600080fd5b611e1f86828701611bb5565b9497909650939450505050565b60208152600061090c6020830184611d0b565b600060208284031215611e5157600080fd5b61090c82611b9e565b6020808252825182820181905260009190848201906040850190845b81811015611ca157835183529284019291840191600101611e76565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715611eca57611eca611e92565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611ef857611ef8611e92565b604052919050565b60006001600160401b03821115611f1957611f19611e92565b5060051b60200190565b60006001600160401b03821115611f3c57611f3c611e92565b50601f01601f191660200190565b6000611f5d611f5884611f00565b611ed0565b8381529050602080820190600585901b840186811115611f7c57600080fd5b845b81811015611ff35780356001600160401b03811115611f9d5760008081fd5b8601601f81018913611faf5760008081fd5b8035611fbd611f5882611f23565b8181528a86838501011115611fd25760008081fd5b81868401878301376000918101860191909152855250928201928201611f7e565b505050509392505050565b60008060006060848603121561201357600080fd5b61201c84611b9e565b925061202a60208501611b9e565b915060408401356001600160401b0381111561204557600080fd5b8401601f8101861361205657600080fd5b61206586823560208401611f4a565b9150509250925092565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156120c457603f198886030184526120b2858351611d0b565b94509285019290850190600101612096565b5092979650505050505050565b60208082526019908201527f476f7665726e61626c653a206f6e6c7920676f7665726e6f7200000000000000604082015260600190565b6000612116611f5884611f00565b83815260208082019190600586811b86013681111561213457600080fd5b865b818110156120c45780356001600160401b03808211156121565760008081fd5b818a0191506040823603121561216c5760008081fd5b612174611ea8565b61217d83611b9e565b815286830135828111156121915760008081fd5b929092019136601f8401126121a857600091508182fd5b823591506121b8611f5883611f00565b82815291861b830187019187810190368411156121d55760008081fd5b938801935b838510156121fa576121eb85611b9e565b825293880193908801906121da565b828901525088525050948301948301612136565b600061090c368484611f4a565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261224857600080fd5b8301803591506001600160401b0382111561226257600080fd5b602001915036819003821315611bf957600080fd5b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b6000600182016122af576122af612287565b5060010190565b60208082526025908201527f46756e6374696f6e417574686f72697a6174696f6e3a20656d7074792066756e60408201526418d31a5cdd60da1b606082015260800190565b60006020828403121561230d57600080fd5b81356001600160e01b03198116811461090c57600080fd5b6001600160a01b0386811682528516602082015260806040820181905281018390526000838560a0840137600060a0858401015260a0601f19601f86011683010190508260608301529695505050505050565b600082601f83011261238957600080fd5b8151612397611f5882611f23565b8181528460208386010111156123ac57600080fd5b611d5e826020830160208701611ce7565b6000602082840312156123cf57600080fd5b81516001600160401b03808211156123e657600080fd5b90830190604082860312156123fa57600080fd5b612402611ea8565b8251801515811461241257600080fd5b815260208301518281111561242657600080fd5b61243287828601612378565b60208301525095945050505050565b600181811c9082168061245557607f821691505b60208210810361247557634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561248d57600080fd5b81516001600160401b038111156124a357600080fd5b611d5e84828501612378565b600080858511156124bf57600080fd5b838611156124cc57600080fd5b5050820193919092039150565b8035602083101561085857600019602084900360031b1b1692915050565b8082018082111561085857610858612287565b8181038181111561085857610858612287565b634e487b7160e01b600052603160045260246000fd5b6bffffffffffffffffffffffff1981358181169160148510156125605780818660140360031b1b83161692505b50509291505056fe46756e6374696f6e417574686f72697a6174696f6e3a206e617469766520746f6b656e207472616e73666572206e6f7420616c6c6f77656446756e6374696f6e417574686f72697a6174696f6e3a20696e76616c69642074784461746146756e6374696f6e417574686f72697a6174696f6e3a206e6f7420616c6c6f7765642066756e6374696f6e536f6c765661756c7447756172645f4552433230417070726f7665417574686f72697a6174696f6ea2646970667358221220eb1ba3948cc6784b2fe88a5ddbf6093751a479832b2c8b94a58506e48761713164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "multicall(bytes[])": {
        "details": "Receives and executes a batch of function calls on this contract."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5712,
        "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
        "label": "governor",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5715,
        "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
        "label": "governanceAllowed",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3957,
        "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
        "label": "caller",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4088,
        "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
        "label": "_contracts",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(AddressSet)325_storage"
      },
      {
        "astId": 4093,
        "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
        "label": "_allowedContractToFunctions",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)204_storage)"
      },
      {
        "astId": 4097,
        "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
        "label": "_contractACL",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 982,
        "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
        "label": "safeAccount",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 985,
        "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
        "label": "_approveFuncs",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 988,
        "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
        "label": "_tokenSet",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(AddressSet)325_storage"
      },
      {
        "astId": 993,
        "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
        "label": "_allowedTokenSpenders",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_struct(AddressSet)325_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(AddressSet)325_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)325_storage"
      },
      "t_mapping(t_address,t_struct(Bytes32Set)204_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)204_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)325_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 324,
            "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)10_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32Set)204_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 203,
            "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)10_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)10_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5,
            "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 9,
            "contract": "src/authorizations/ERC20ApproveAuthorization.sol:ERC20ApproveAuthorization",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}